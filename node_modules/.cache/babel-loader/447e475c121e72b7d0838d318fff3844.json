{"ast":null,"code":"\"use strict\";\n\nvar reduce = require(\"reducible/reduce\");\n\nvar reducible = require(\"reducible/reducible\");\n\nvar end = require(\"reducible/end\");\n\nvar isError = require(\"reducible/is-error\");\n\nfunction reductions(source, f, initial) {\n  /**\n  Returns `reducible` collection of the intermediate values of the reduction\n  (as per reduce) of `source` by `f`, starting with `initial` value.\n   ## Example\n   var numbers = reductions([1, 1, 1, 1], function(accumulated, value) {\n    return accumulated + value\n  }, 0)\n  print(numbers) // => < 1 2 3 4 >\n  **/\n  return reducible(function reduceReductions(next, start) {\n    var state = initial;\n    return reduce(source, function reduceReductionsSource(value, result) {\n      if (value === end) return next(end, result);\n      if (isError(value)) return next(value, result);\n      state = f(state, value);\n      return next(state, result);\n    }, start);\n  });\n}\n\nmodule.exports = reductions;","map":{"version":3,"sources":["/Users/suleymantarsuslu/Desktop/graduateApp/new/graduate/node_modules/reducers/reductions.js"],"names":["reduce","require","reducible","end","isError","reductions","source","f","initial","reduceReductions","next","start","state","reduceReductionsSource","value","result","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,MAAM,GAAGC,OAAO,CAAC,kBAAD,CAApB;;AACA,IAAIC,SAAS,GAAGD,OAAO,CAAC,qBAAD,CAAvB;;AACA,IAAIE,GAAG,GAAGF,OAAO,CAAC,eAAD,CAAjB;;AACA,IAAIG,OAAO,GAAGH,OAAO,CAAC,oBAAD,CAArB;;AAEA,SAASI,UAAT,CAAoBC,MAApB,EAA4BC,CAA5B,EAA+BC,OAA/B,EAAwC;AACtC;;;;;;;;;AAWA,SAAON,SAAS,CAAC,SAASO,gBAAT,CAA0BC,IAA1B,EAAgCC,KAAhC,EAAuC;AACtD,QAAIC,KAAK,GAAGJ,OAAZ;AACA,WAAOR,MAAM,CAACM,MAAD,EAAS,SAASO,sBAAT,CAAgCC,KAAhC,EAAuCC,MAAvC,EAA+C;AACnE,UAAID,KAAK,KAAKX,GAAd,EAAmB,OAAOO,IAAI,CAACP,GAAD,EAAMY,MAAN,CAAX;AACnB,UAAIX,OAAO,CAACU,KAAD,CAAX,EAAoB,OAAOJ,IAAI,CAACI,KAAD,EAAQC,MAAR,CAAX;AACpBH,MAAAA,KAAK,GAAGL,CAAC,CAACK,KAAD,EAAQE,KAAR,CAAT;AACA,aAAOJ,IAAI,CAACE,KAAD,EAAQG,MAAR,CAAX;AACD,KALY,EAKVJ,KALU,CAAb;AAMD,GARe,CAAhB;AASD;;AAEDK,MAAM,CAACC,OAAP,GAAiBZ,UAAjB","sourcesContent":["\"use strict\";\n\nvar reduce = require(\"reducible/reduce\")\nvar reducible = require(\"reducible/reducible\")\nvar end = require(\"reducible/end\")\nvar isError = require(\"reducible/is-error\")\n\nfunction reductions(source, f, initial) {\n  /**\n  Returns `reducible` collection of the intermediate values of the reduction\n  (as per reduce) of `source` by `f`, starting with `initial` value.\n\n  ## Example\n\n  var numbers = reductions([1, 1, 1, 1], function(accumulated, value) {\n    return accumulated + value\n  }, 0)\n  print(numbers) // => < 1 2 3 4 >\n  **/\n  return reducible(function reduceReductions(next, start) {\n    var state = initial\n    return reduce(source, function reduceReductionsSource(value, result) {\n      if (value === end) return next(end, result)\n      if (isError(value)) return next(value, result)\n      state = f(state, value)\n      return next(state, result)\n    }, start)\n  })\n}\n\nmodule.exports = reductions\n"]},"metadata":{},"sourceType":"script"}