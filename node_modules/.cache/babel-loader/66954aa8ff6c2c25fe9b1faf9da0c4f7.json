{"ast":null,"code":"\"use strict\";\n\nvar reducible = require(\"reducible/reducible\");\n\nvar reduce = require(\"reducible/reduce\");\n\nvar reduced = require(\"reducible/reduced\");\n\nvar isError = require(\"reducible/is-error\");\n\nfunction capture(source, recover) {\n  /**\n  Creates and returns safe version of given `source` sequence, by using\n  `recover` function to recover from errors that may occur while reducing\n  a `source`. This is a mechanism for error handling and recovery for streams\n  that representing IO operations like (XHR / WebSockets etc...) where errors\n  may occur.\n  **/\n  return reducible(function reduceCapture(next, initial) {\n    var failure = void 0;\n    reduce(source, function reduceCaptureSource(value, result) {\n      // If error has already being captured then return\n      if (failure) return failure; // If value is an error then continue accumulation of recovered\n      // sequence.\n      else if (isError(value)) {\n          failure = reduced(result);\n          reduce(recover(value, result), next, result);\n          return failure;\n        } // Otherwise just forward messages.\n        else return next(value, result);\n    }, initial);\n  });\n}\n\nmodule.exports = capture;","map":{"version":3,"sources":["/Users/suleymantarsuslu/Desktop/graduateApp/new/graduate/node_modules/reducers/capture.js"],"names":["reducible","require","reduce","reduced","isError","capture","source","recover","reduceCapture","next","initial","failure","reduceCaptureSource","value","result","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,SAAS,GAAGC,OAAO,CAAC,qBAAD,CAAvB;;AACA,IAAIC,MAAM,GAAGD,OAAO,CAAC,kBAAD,CAApB;;AACA,IAAIE,OAAO,GAAGF,OAAO,CAAC,mBAAD,CAArB;;AACA,IAAIG,OAAO,GAAGH,OAAO,CAAC,oBAAD,CAArB;;AAEA,SAASI,OAAT,CAAiBC,MAAjB,EAAyBC,OAAzB,EAAkC;AAChC;;;;;;;AAOA,SAAOP,SAAS,CAAC,SAASQ,aAAT,CAAuBC,IAAvB,EAA6BC,OAA7B,EAAsC;AACrD,QAAIC,OAAO,GAAG,KAAK,CAAnB;AACAT,IAAAA,MAAM,CAACI,MAAD,EAAS,SAASM,mBAAT,CAA6BC,KAA7B,EAAoCC,MAApC,EAA4C;AACzD;AACA,UAAIH,OAAJ,EAAa,OAAOA,OAAP,CAAb,CACA;AACA;AAFA,WAGK,IAAIP,OAAO,CAACS,KAAD,CAAX,EAAoB;AACvBF,UAAAA,OAAO,GAAGR,OAAO,CAACW,MAAD,CAAjB;AACAZ,UAAAA,MAAM,CAACK,OAAO,CAACM,KAAD,EAAQC,MAAR,CAAR,EAAyBL,IAAzB,EAA+BK,MAA/B,CAAN;AACA,iBAAOH,OAAP;AACD,SAJI,CAKL;AALK,aAMA,OAAOF,IAAI,CAACI,KAAD,EAAQC,MAAR,CAAX;AACN,KAZK,EAYHJ,OAZG,CAAN;AAaD,GAfe,CAAhB;AAgBD;;AAEDK,MAAM,CAACC,OAAP,GAAiBX,OAAjB","sourcesContent":["\"use strict\";\n\nvar reducible = require(\"reducible/reducible\")\nvar reduce = require(\"reducible/reduce\")\nvar reduced = require(\"reducible/reduced\")\nvar isError = require(\"reducible/is-error\")\n\nfunction capture(source, recover) {\n  /**\n  Creates and returns safe version of given `source` sequence, by using\n  `recover` function to recover from errors that may occur while reducing\n  a `source`. This is a mechanism for error handling and recovery for streams\n  that representing IO operations like (XHR / WebSockets etc...) where errors\n  may occur.\n  **/\n  return reducible(function reduceCapture(next, initial) {\n    var failure = void(0)\n    reduce(source, function reduceCaptureSource(value, result) {\n      // If error has already being captured then return\n      if (failure) return failure\n      // If value is an error then continue accumulation of recovered\n      // sequence.\n      else if (isError(value)) {\n        failure = reduced(result)\n        reduce(recover(value, result), next, result)\n        return failure\n      }\n      // Otherwise just forward messages.\n      else return next(value, result)\n    }, initial)\n  })\n}\n\nmodule.exports = capture\n"]},"metadata":{},"sourceType":"script"}