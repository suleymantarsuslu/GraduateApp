{"ast":null,"code":"\"use strict\";\n\nvar reducible = require(\"reducible/reducible\");\n\nvar reduce = require(\"reducible/reduce\");\n\nvar end = require(\"reducible/end\");\n\nvar slicer = Array.prototype.slice;\n\nfunction append(left, right) {\n  /**\n  Returns sequences of items in the `left` sequence followed by the\n  items in the `right` sequence.\n  **/\n  return reducible(function reduceConcatination(next, initial) {\n    reduce(left, function reduceLeft(value, result) {\n      return value === end ? reduce(right, next, result) : next(value, result);\n    }, initial);\n  });\n}\n\nfunction concat(left, right\n/*, ...rest*/\n) {\n  /**\n  Returns a sequence representing the concatenation of the elements in the\n  supplied arguments, in the given order.\n   print(concat([ 1 ], [ 2, 3 ], [ 4, 5, 6 ])) // => <stream 1 2 3 4 5 6 />\n   **/\n  switch (arguments.length) {\n    case 1:\n      return left;\n\n    case 2:\n      return append(left, right);\n\n    default:\n      return slicer.call(arguments).reduce(append);\n  }\n}\n\nmodule.exports = concat;","map":{"version":3,"sources":["/Users/suleymantarsuslu/Desktop/graduateApp/new/graduate/node_modules/reducers/concat.js"],"names":["reducible","require","reduce","end","slicer","Array","prototype","slice","append","left","right","reduceConcatination","next","initial","reduceLeft","value","result","concat","arguments","length","call","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,SAAS,GAAGC,OAAO,CAAC,qBAAD,CAAvB;;AACA,IAAIC,MAAM,GAAGD,OAAO,CAAC,kBAAD,CAApB;;AACA,IAAIE,GAAG,GAAGF,OAAO,CAAC,eAAD,CAAjB;;AAEA,IAAIG,MAAM,GAAGC,KAAK,CAACC,SAAN,CAAgBC,KAA7B;;AAEA,SAASC,MAAT,CAAgBC,IAAhB,EAAsBC,KAAtB,EAA6B;AAC3B;;;;AAIA,SAAOV,SAAS,CAAC,SAASW,mBAAT,CAA6BC,IAA7B,EAAmCC,OAAnC,EAA4C;AAC3DX,IAAAA,MAAM,CAACO,IAAD,EAAO,SAASK,UAAT,CAAoBC,KAApB,EAA2BC,MAA3B,EAAmC;AAC9C,aAAOD,KAAK,KAAKZ,GAAV,GAAgBD,MAAM,CAACQ,KAAD,EAAQE,IAAR,EAAcI,MAAd,CAAtB,GACAJ,IAAI,CAACG,KAAD,EAAQC,MAAR,CADX;AAED,KAHK,EAGHH,OAHG,CAAN;AAID,GALe,CAAhB;AAMD;;AAED,SAASI,MAAT,CAAgBR,IAAhB,EAAsBC;AAAM;AAA5B,EAA2C;AACzC;;;;;AAOA,UAAQQ,SAAS,CAACC,MAAlB;AACE,SAAK,CAAL;AAAQ,aAAOV,IAAP;;AACR,SAAK,CAAL;AAAQ,aAAOD,MAAM,CAACC,IAAD,EAAOC,KAAP,CAAb;;AACR;AAAS,aAAON,MAAM,CAACgB,IAAP,CAAYF,SAAZ,EAAuBhB,MAAvB,CAA8BM,MAA9B,CAAP;AAHX;AAKD;;AAEDa,MAAM,CAACC,OAAP,GAAiBL,MAAjB","sourcesContent":["\"use strict\";\n\nvar reducible = require(\"reducible/reducible\")\nvar reduce = require(\"reducible/reduce\")\nvar end = require(\"reducible/end\")\n\nvar slicer = Array.prototype.slice\n\nfunction append(left, right) {\n  /**\n  Returns sequences of items in the `left` sequence followed by the\n  items in the `right` sequence.\n  **/\n  return reducible(function reduceConcatination(next, initial) {\n    reduce(left, function reduceLeft(value, result) {\n      return value === end ? reduce(right, next, result) :\n             next(value, result)\n    }, initial)\n  })\n}\n\nfunction concat(left, right /*, ...rest*/) {\n  /**\n  Returns a sequence representing the concatenation of the elements in the\n  supplied arguments, in the given order.\n\n  print(concat([ 1 ], [ 2, 3 ], [ 4, 5, 6 ])) // => <stream 1 2 3 4 5 6 />\n\n  **/\n  switch (arguments.length) {\n    case 1: return left\n    case 2: return append(left, right)\n    default: return slicer.call(arguments).reduce(append)\n  }\n}\n\nmodule.exports = concat\n"]},"metadata":{},"sourceType":"script"}