{"ast":null,"code":"/*jshint maxlen: false*/\nvar validator = require(\"validator\");\n\nvar FormatValidators = {\n  \"date\": function (date) {\n    if (typeof date !== \"string\") {\n      return true;\n    } // full-date from http://tools.ietf.org/html/rfc3339#section-5.6\n\n\n    var matches = /^([0-9]{4})-([0-9]{2})-([0-9]{2})$/.exec(date);\n\n    if (matches === null) {\n      return false;\n    } // var year = matches[1];\n    // var month = matches[2];\n    // var day = matches[3];\n\n\n    if (matches[2] < \"01\" || matches[2] > \"12\" || matches[3] < \"01\" || matches[3] > \"31\") {\n      return false;\n    }\n\n    return true;\n  },\n  \"date-time\": function (dateTime) {\n    if (typeof dateTime !== \"string\") {\n      return true;\n    } // date-time from http://tools.ietf.org/html/rfc3339#section-5.6\n\n\n    var s = dateTime.toLowerCase().split(\"t\");\n\n    if (!FormatValidators.date(s[0])) {\n      return false;\n    }\n\n    var matches = /^([0-9]{2}):([0-9]{2}):([0-9]{2})(.[0-9]+)?(z|([+-][0-9]{2}:[0-9]{2}))$/.exec(s[1]);\n\n    if (matches === null) {\n      return false;\n    } // var hour = matches[1];\n    // var minute = matches[2];\n    // var second = matches[3];\n    // var fraction = matches[4];\n    // var timezone = matches[5];\n\n\n    if (matches[1] > \"23\" || matches[2] > \"59\" || matches[3] > \"59\") {\n      return false;\n    }\n\n    return true;\n  },\n  \"email\": function (email) {\n    if (typeof email !== \"string\") {\n      return true;\n    }\n\n    return validator.isEmail(email, {\n      \"require_tld\": true\n    });\n  },\n  \"hostname\": function (hostname) {\n    if (typeof hostname !== \"string\") {\n      return true;\n    }\n    /*\n        http://json-schema.org/latest/json-schema-validation.html#anchor114\n        A string instance is valid against this attribute if it is a valid\n        representation for an Internet host name, as defined by RFC 1034, section 3.1 [RFC1034].\n         http://tools.ietf.org/html/rfc1034#section-3.5\n         <digit> ::= any one of the ten digits 0 through 9\n        var digit = /[0-9]/;\n         <letter> ::= any one of the 52 alphabetic characters A through Z in upper case and a through z in lower case\n        var letter = /[a-zA-Z]/;\n         <let-dig> ::= <letter> | <digit>\n        var letDig = /[0-9a-zA-Z]/;\n         <let-dig-hyp> ::= <let-dig> | \"-\"\n        var letDigHyp = /[-0-9a-zA-Z]/;\n         <ldh-str> ::= <let-dig-hyp> | <let-dig-hyp> <ldh-str>\n        var ldhStr = /[-0-9a-zA-Z]+/;\n         <label> ::= <letter> [ [ <ldh-str> ] <let-dig> ]\n        var label = /[a-zA-Z](([-0-9a-zA-Z]+)?[0-9a-zA-Z])?/;\n         <subdomain> ::= <label> | <subdomain> \".\" <label>\n        var subdomain = /^[a-zA-Z](([-0-9a-zA-Z]+)?[0-9a-zA-Z])?(\\.[a-zA-Z](([-0-9a-zA-Z]+)?[0-9a-zA-Z])?)*$/;\n         <domain> ::= <subdomain> | \" \"\n        var domain = null;\n    */\n\n\n    var valid = /^[a-zA-Z](([-0-9a-zA-Z]+)?[0-9a-zA-Z])?(\\.[a-zA-Z](([-0-9a-zA-Z]+)?[0-9a-zA-Z])?)*$/.test(hostname);\n\n    if (valid) {\n      // the sum of all label octets and label lengths is limited to 255.\n      if (hostname.length > 255) {\n        return false;\n      } // Each node has a label, which is zero to 63 octets in length\n\n\n      var labels = hostname.split(\".\");\n\n      for (var i = 0; i < labels.length; i++) {\n        if (labels[i].length > 63) {\n          return false;\n        }\n      }\n    }\n\n    return valid;\n  },\n  \"host-name\": function (hostname) {\n    return FormatValidators.hostname.call(this, hostname);\n  },\n  \"ipv4\": function (ipv4) {\n    if (typeof ipv4 !== \"string\") {\n      return true;\n    }\n\n    return validator.isIP(ipv4, 4);\n  },\n  \"ipv6\": function (ipv6) {\n    if (typeof ipv6 !== \"string\") {\n      return true;\n    }\n\n    return validator.isIP(ipv6, 6);\n  },\n  \"regex\": function (str) {\n    try {\n      RegExp(str);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  },\n  \"uri\": function (uri) {\n    if (this.options.strictUris) {\n      return FormatValidators[\"strict-uri\"].apply(this, arguments);\n    } // https://github.com/zaggino/z-schema/issues/18\n    // RegExp from http://tools.ietf.org/html/rfc3986#appendix-B\n\n\n    return typeof uri !== \"string\" || RegExp(\"^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\\\?([^#]*))?(#(.*))?\").test(uri);\n  },\n  \"strict-uri\": function (uri) {\n    return typeof uri !== \"string\" || validator.isURL(uri);\n  }\n};\nmodule.exports = FormatValidators;","map":{"version":3,"sources":["/Users/suleymantarsuslu/Desktop/graduateApp/new/graduate/node_modules/z-schema/src/FormatValidators.js"],"names":["validator","require","FormatValidators","date","matches","exec","dateTime","s","toLowerCase","split","email","isEmail","hostname","valid","test","length","labels","i","call","ipv4","isIP","ipv6","str","RegExp","e","uri","options","strictUris","apply","arguments","isURL","module","exports"],"mappings":"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","sourcesContent":["/*jshint maxlen: false*/\n\nvar validator = require(\"validator\");\n\nvar FormatValidators = {\n    \"date\": function (date) {\n        if (typeof date !== \"string\") {\n            return true;\n        }\n        // full-date from http://tools.ietf.org/html/rfc3339#section-5.6\n        var matches = /^([0-9]{4})-([0-9]{2})-([0-9]{2})$/.exec(date);\n        if (matches === null) {\n            return false;\n        }\n        // var year = matches[1];\n        // var month = matches[2];\n        // var day = matches[3];\n        if (matches[2] < \"01\" || matches[2] > \"12\" || matches[3] < \"01\" || matches[3] > \"31\") {\n            return false;\n        }\n        return true;\n    },\n    \"date-time\": function (dateTime) {\n        if (typeof dateTime !== \"string\") {\n            return true;\n        }\n        // date-time from http://tools.ietf.org/html/rfc3339#section-5.6\n        var s = dateTime.toLowerCase().split(\"t\");\n        if (!FormatValidators.date(s[0])) {\n            return false;\n        }\n        var matches = /^([0-9]{2}):([0-9]{2}):([0-9]{2})(.[0-9]+)?(z|([+-][0-9]{2}:[0-9]{2}))$/.exec(s[1]);\n        if (matches === null) {\n            return false;\n        }\n        // var hour = matches[1];\n        // var minute = matches[2];\n        // var second = matches[3];\n        // var fraction = matches[4];\n        // var timezone = matches[5];\n        if (matches[1] > \"23\" || matches[2] > \"59\" || matches[3] > \"59\") {\n            return false;\n        }\n        return true;\n    },\n    \"email\": function (email) {\n        if (typeof email !== \"string\") {\n            return true;\n        }\n        return validator.isEmail(email, { \"require_tld\": true });\n    },\n    \"hostname\": function (hostname) {\n        if (typeof hostname !== \"string\") {\n            return true;\n        }\n        /*\n            http://json-schema.org/latest/json-schema-validation.html#anchor114\n            A string instance is valid against this attribute if it is a valid\n            representation for an Internet host name, as defined by RFC 1034, section 3.1 [RFC1034].\n\n            http://tools.ietf.org/html/rfc1034#section-3.5\n\n            <digit> ::= any one of the ten digits 0 through 9\n            var digit = /[0-9]/;\n\n            <letter> ::= any one of the 52 alphabetic characters A through Z in upper case and a through z in lower case\n            var letter = /[a-zA-Z]/;\n\n            <let-dig> ::= <letter> | <digit>\n            var letDig = /[0-9a-zA-Z]/;\n\n            <let-dig-hyp> ::= <let-dig> | \"-\"\n            var letDigHyp = /[-0-9a-zA-Z]/;\n\n            <ldh-str> ::= <let-dig-hyp> | <let-dig-hyp> <ldh-str>\n            var ldhStr = /[-0-9a-zA-Z]+/;\n\n            <label> ::= <letter> [ [ <ldh-str> ] <let-dig> ]\n            var label = /[a-zA-Z](([-0-9a-zA-Z]+)?[0-9a-zA-Z])?/;\n\n            <subdomain> ::= <label> | <subdomain> \".\" <label>\n            var subdomain = /^[a-zA-Z](([-0-9a-zA-Z]+)?[0-9a-zA-Z])?(\\.[a-zA-Z](([-0-9a-zA-Z]+)?[0-9a-zA-Z])?)*$/;\n\n            <domain> ::= <subdomain> | \" \"\n            var domain = null;\n        */\n        var valid = /^[a-zA-Z](([-0-9a-zA-Z]+)?[0-9a-zA-Z])?(\\.[a-zA-Z](([-0-9a-zA-Z]+)?[0-9a-zA-Z])?)*$/.test(hostname);\n        if (valid) {\n            // the sum of all label octets and label lengths is limited to 255.\n            if (hostname.length > 255) { return false; }\n            // Each node has a label, which is zero to 63 octets in length\n            var labels = hostname.split(\".\");\n            for (var i = 0; i < labels.length; i++) { if (labels[i].length > 63) { return false; } }\n        }\n        return valid;\n    },\n    \"host-name\": function (hostname) {\n        return FormatValidators.hostname.call(this, hostname);\n    },\n    \"ipv4\": function (ipv4) {\n        if (typeof ipv4 !== \"string\") { return true; }\n        return validator.isIP(ipv4, 4);\n    },\n    \"ipv6\": function (ipv6) {\n        if (typeof ipv6 !== \"string\") { return true; }\n        return validator.isIP(ipv6, 6);\n    },\n    \"regex\": function (str) {\n        try {\n            RegExp(str);\n            return true;\n        } catch (e) {\n            return false;\n        }\n    },\n    \"uri\": function (uri) {\n        if (this.options.strictUris) {\n            return FormatValidators[\"strict-uri\"].apply(this, arguments);\n        }\n        // https://github.com/zaggino/z-schema/issues/18\n        // RegExp from http://tools.ietf.org/html/rfc3986#appendix-B\n        return typeof uri !== \"string\" || RegExp(\"^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\\\?([^#]*))?(#(.*))?\").test(uri);\n    },\n    \"strict-uri\": function (uri) {\n        return typeof uri !== \"string\" || validator.isURL(uri);\n    }\n};\n\nmodule.exports = FormatValidators;\n"]},"metadata":{},"sourceType":"script"}