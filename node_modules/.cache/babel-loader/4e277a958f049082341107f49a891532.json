{"ast":null,"code":"/* eslint lines-around-comment: [2, {beforeBlockComment: false}] */\n\"use strict\";\n\nconst yaml = require(\"js-yaml\");\n\nconst {\n  ono\n} = require(\"@jsdevtools/ono\");\n/**\n * Simple YAML parsing functions, similar to {@link JSON.parse} and {@link JSON.stringify}\n */\n\n\nmodule.exports = {\n  /**\n   * Parses a YAML string and returns the value.\n   *\n   * @param {string} text - The YAML string to be parsed\n   * @param {function} [reviver] - Not currently supported. Provided for consistency with {@link JSON.parse}\n   * @returns {*}\n   */\n  parse(text, reviver) {\n    try {\n      return yaml.safeLoad(text);\n    } catch (e) {\n      if (e instanceof Error) {\n        throw e;\n      } else {\n        // https://github.com/nodeca/js-yaml/issues/153\n        throw ono(e, e.message);\n      }\n    }\n  },\n\n  /**\n   * Converts a JavaScript value to a YAML string.\n   *\n   * @param   {*} value - The value to convert to YAML\n   * @param   {function|array} replacer - Not currently supported. Provided for consistency with {@link JSON.stringify}\n   * @param   {string|number} space - The number of spaces to use for indentation, or a string containing the number of spaces.\n   * @returns {string}\n   */\n  stringify(value, replacer, space) {\n    try {\n      let indent = (typeof space === \"string\" ? space.length : space) || 2;\n      return yaml.safeDump(value, {\n        indent\n      });\n    } catch (e) {\n      if (e instanceof Error) {\n        throw e;\n      } else {\n        // https://github.com/nodeca/js-yaml/issues/153\n        throw ono(e, e.message);\n      }\n    }\n  }\n\n};","map":{"version":3,"sources":["/Users/suleymantarsuslu/Desktop/graduateApp/new/graduate/node_modules/@apidevtools/swagger-parser/node_modules/@apidevtools/json-schema-ref-parser/lib/util/yaml.js"],"names":["yaml","require","ono","module","exports","parse","text","reviver","safeLoad","e","Error","message","stringify","value","replacer","space","indent","length","safeDump"],"mappings":"AAAA;AACA;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,SAAD,CAApB;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAUD,OAAO,CAAC,iBAAD,CAAvB;AAEA;;;;;AAGAE,MAAM,CAACC,OAAP,GAAiB;AACf;;;;;;;AAOAC,EAAAA,KAAK,CAAEC,IAAF,EAAQC,OAAR,EAAiB;AACpB,QAAI;AACF,aAAOP,IAAI,CAACQ,QAAL,CAAcF,IAAd,CAAP;AACD,KAFD,CAGA,OAAOG,CAAP,EAAU;AACR,UAAIA,CAAC,YAAYC,KAAjB,EAAwB;AACtB,cAAMD,CAAN;AACD,OAFD,MAGK;AACH;AACA,cAAMP,GAAG,CAACO,CAAD,EAAIA,CAAC,CAACE,OAAN,CAAT;AACD;AACF;AACF,GArBc;;AAuBf;;;;;;;;AAQAC,EAAAA,SAAS,CAAEC,KAAF,EAASC,QAAT,EAAmBC,KAAnB,EAA0B;AACjC,QAAI;AACF,UAAIC,MAAM,GAAG,CAAC,OAAOD,KAAP,KAAiB,QAAjB,GAA4BA,KAAK,CAACE,MAAlC,GAA2CF,KAA5C,KAAsD,CAAnE;AACA,aAAOf,IAAI,CAACkB,QAAL,CAAcL,KAAd,EAAqB;AAAEG,QAAAA;AAAF,OAArB,CAAP;AACD,KAHD,CAIA,OAAOP,CAAP,EAAU;AACR,UAAIA,CAAC,YAAYC,KAAjB,EAAwB;AACtB,cAAMD,CAAN;AACD,OAFD,MAGK;AACH;AACA,cAAMP,GAAG,CAACO,CAAD,EAAIA,CAAC,CAACE,OAAN,CAAT;AACD;AACF;AACF;;AA7Cc,CAAjB","sourcesContent":["/* eslint lines-around-comment: [2, {beforeBlockComment: false}] */\n\"use strict\";\n\nconst yaml = require(\"js-yaml\");\nconst { ono } = require(\"@jsdevtools/ono\");\n\n/**\n * Simple YAML parsing functions, similar to {@link JSON.parse} and {@link JSON.stringify}\n */\nmodule.exports = {\n  /**\n   * Parses a YAML string and returns the value.\n   *\n   * @param {string} text - The YAML string to be parsed\n   * @param {function} [reviver] - Not currently supported. Provided for consistency with {@link JSON.parse}\n   * @returns {*}\n   */\n  parse (text, reviver) {\n    try {\n      return yaml.safeLoad(text);\n    }\n    catch (e) {\n      if (e instanceof Error) {\n        throw e;\n      }\n      else {\n        // https://github.com/nodeca/js-yaml/issues/153\n        throw ono(e, e.message);\n      }\n    }\n  },\n\n  /**\n   * Converts a JavaScript value to a YAML string.\n   *\n   * @param   {*} value - The value to convert to YAML\n   * @param   {function|array} replacer - Not currently supported. Provided for consistency with {@link JSON.stringify}\n   * @param   {string|number} space - The number of spaces to use for indentation, or a string containing the number of spaces.\n   * @returns {string}\n   */\n  stringify (value, replacer, space) {\n    try {\n      let indent = (typeof space === \"string\" ? space.length : space) || 2;\n      return yaml.safeDump(value, { indent });\n    }\n    catch (e) {\n      if (e instanceof Error) {\n        throw e;\n      }\n      else {\n        // https://github.com/nodeca/js-yaml/issues/153\n        throw ono(e, e.message);\n      }\n    }\n  }\n};\n"]},"metadata":{},"sourceType":"script"}