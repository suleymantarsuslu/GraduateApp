{"ast":null,"code":"'use strict';\n\nconst path = require('path');\n\nconst fs = require('fs');\n\nconst commonDir = require('commondir');\n\nconst pkgDir = require('pkg-dir');\n\nconst makeDir = require('make-dir');\n\nconst {\n  env,\n  cwd\n} = process;\n\nconst isWritable = path => {\n  try {\n    fs.accessSync(path, fs.constants.W_OK);\n    return true;\n  } catch (_) {\n    return false;\n  }\n};\n\nfunction useDirectory(directory, options) {\n  if (options.create) {\n    makeDir.sync(directory);\n  }\n\n  if (options.thunk) {\n    return (...arguments_) => path.join(directory, ...arguments_);\n  }\n\n  return directory;\n}\n\nfunction getNodeModuleDirectory(directory) {\n  const nodeModules = path.join(directory, 'node_modules');\n\n  if (!isWritable(nodeModules) && (fs.existsSync(nodeModules) || !isWritable(path.join(directory)))) {\n    return;\n  }\n\n  return nodeModules;\n}\n\nmodule.exports = (options = {}) => {\n  if (env.CACHE_DIR && !['true', 'false', '1', '0'].includes(env.CACHE_DIR)) {\n    return useDirectory(path.join(env.CACHE_DIR, 'find-cache-dir'), options);\n  }\n\n  let {\n    cwd: directory = cwd()\n  } = options;\n\n  if (options.files) {\n    directory = commonDir(directory, options.files);\n  }\n\n  directory = pkgDir.sync(directory);\n\n  if (!directory) {\n    return;\n  }\n\n  const nodeModules = getNodeModuleDirectory(directory);\n\n  if (!nodeModules) {\n    return undefined;\n  }\n\n  return useDirectory(path.join(directory, 'node_modules', '.cache', options.name), options);\n};","map":{"version":3,"sources":["/Users/suleymantarsuslu/Desktop/graduateApp/new/graduate/node_modules/api/node_modules/find-cache-dir/index.js"],"names":["path","require","fs","commonDir","pkgDir","makeDir","env","cwd","process","isWritable","accessSync","constants","W_OK","_","useDirectory","directory","options","create","sync","thunk","arguments_","join","getNodeModuleDirectory","nodeModules","existsSync","module","exports","CACHE_DIR","includes","files","undefined","name"],"mappings":"AAAA;;AACA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMC,EAAE,GAAGD,OAAO,CAAC,IAAD,CAAlB;;AACA,MAAME,SAAS,GAAGF,OAAO,CAAC,WAAD,CAAzB;;AACA,MAAMG,MAAM,GAAGH,OAAO,CAAC,SAAD,CAAtB;;AACA,MAAMI,OAAO,GAAGJ,OAAO,CAAC,UAAD,CAAvB;;AAEA,MAAM;AAACK,EAAAA,GAAD;AAAMC,EAAAA;AAAN,IAAaC,OAAnB;;AAEA,MAAMC,UAAU,GAAGT,IAAI,IAAI;AAC1B,MAAI;AACHE,IAAAA,EAAE,CAACQ,UAAH,CAAcV,IAAd,EAAoBE,EAAE,CAACS,SAAH,CAAaC,IAAjC;AACA,WAAO,IAAP;AACA,GAHD,CAGE,OAAOC,CAAP,EAAU;AACX,WAAO,KAAP;AACA;AACD,CAPD;;AASA,SAASC,YAAT,CAAsBC,SAAtB,EAAiCC,OAAjC,EAA0C;AACzC,MAAIA,OAAO,CAACC,MAAZ,EAAoB;AACnBZ,IAAAA,OAAO,CAACa,IAAR,CAAaH,SAAb;AACA;;AAED,MAAIC,OAAO,CAACG,KAAZ,EAAmB;AAClB,WAAO,CAAC,GAAGC,UAAJ,KAAmBpB,IAAI,CAACqB,IAAL,CAAUN,SAAV,EAAqB,GAAGK,UAAxB,CAA1B;AACA;;AAED,SAAOL,SAAP;AACA;;AAED,SAASO,sBAAT,CAAgCP,SAAhC,EAA2C;AAC1C,QAAMQ,WAAW,GAAGvB,IAAI,CAACqB,IAAL,CAAUN,SAAV,EAAqB,cAArB,CAApB;;AAEA,MACC,CAACN,UAAU,CAACc,WAAD,CAAX,KACCrB,EAAE,CAACsB,UAAH,CAAcD,WAAd,KAA8B,CAACd,UAAU,CAACT,IAAI,CAACqB,IAAL,CAAUN,SAAV,CAAD,CAD1C,CADD,EAGE;AACD;AACA;;AAED,SAAOQ,WAAP;AACA;;AAEDE,MAAM,CAACC,OAAP,GAAiB,CAACV,OAAO,GAAG,EAAX,KAAkB;AAClC,MAAIV,GAAG,CAACqB,SAAJ,IAAiB,CAAC,CAAC,MAAD,EAAS,OAAT,EAAkB,GAAlB,EAAuB,GAAvB,EAA4BC,QAA5B,CAAqCtB,GAAG,CAACqB,SAAzC,CAAtB,EAA2E;AAC1E,WAAOb,YAAY,CAACd,IAAI,CAACqB,IAAL,CAAUf,GAAG,CAACqB,SAAd,EAAyB,gBAAzB,CAAD,EAA6CX,OAA7C,CAAnB;AACA;;AAED,MAAI;AAACT,IAAAA,GAAG,EAAEQ,SAAS,GAAGR,GAAG;AAArB,MAA2BS,OAA/B;;AAEA,MAAIA,OAAO,CAACa,KAAZ,EAAmB;AAClBd,IAAAA,SAAS,GAAGZ,SAAS,CAACY,SAAD,EAAYC,OAAO,CAACa,KAApB,CAArB;AACA;;AAEDd,EAAAA,SAAS,GAAGX,MAAM,CAACc,IAAP,CAAYH,SAAZ,CAAZ;;AAEA,MAAI,CAACA,SAAL,EAAgB;AACf;AACA;;AAED,QAAMQ,WAAW,GAAGD,sBAAsB,CAACP,SAAD,CAA1C;;AACA,MAAI,CAACQ,WAAL,EAAkB;AACjB,WAAOO,SAAP;AACA;;AAED,SAAOhB,YAAY,CAACd,IAAI,CAACqB,IAAL,CAAUN,SAAV,EAAqB,cAArB,EAAqC,QAArC,EAA+CC,OAAO,CAACe,IAAvD,CAAD,EAA+Df,OAA/D,CAAnB;AACA,CAvBD","sourcesContent":["'use strict';\nconst path = require('path');\nconst fs = require('fs');\nconst commonDir = require('commondir');\nconst pkgDir = require('pkg-dir');\nconst makeDir = require('make-dir');\n\nconst {env, cwd} = process;\n\nconst isWritable = path => {\n\ttry {\n\t\tfs.accessSync(path, fs.constants.W_OK);\n\t\treturn true;\n\t} catch (_) {\n\t\treturn false;\n\t}\n};\n\nfunction useDirectory(directory, options) {\n\tif (options.create) {\n\t\tmakeDir.sync(directory);\n\t}\n\n\tif (options.thunk) {\n\t\treturn (...arguments_) => path.join(directory, ...arguments_);\n\t}\n\n\treturn directory;\n}\n\nfunction getNodeModuleDirectory(directory) {\n\tconst nodeModules = path.join(directory, 'node_modules');\n\n\tif (\n\t\t!isWritable(nodeModules) &&\n\t\t(fs.existsSync(nodeModules) || !isWritable(path.join(directory)))\n\t) {\n\t\treturn;\n\t}\n\n\treturn nodeModules;\n}\n\nmodule.exports = (options = {}) => {\n\tif (env.CACHE_DIR && !['true', 'false', '1', '0'].includes(env.CACHE_DIR)) {\n\t\treturn useDirectory(path.join(env.CACHE_DIR, 'find-cache-dir'), options);\n\t}\n\n\tlet {cwd: directory = cwd()} = options;\n\n\tif (options.files) {\n\t\tdirectory = commonDir(directory, options.files);\n\t}\n\n\tdirectory = pkgDir.sync(directory);\n\n\tif (!directory) {\n\t\treturn;\n\t}\n\n\tconst nodeModules = getNodeModuleDirectory(directory);\n\tif (!nodeModules) {\n\t\treturn undefined;\n\t}\n\n\treturn useDirectory(path.join(directory, 'node_modules', '.cache', options.name), options);\n};\n"]},"metadata":{},"sourceType":"script"}