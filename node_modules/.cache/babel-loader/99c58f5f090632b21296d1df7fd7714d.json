{"ast":null,"code":"/* eslint-disable no-underscore-dangle */\n// Needs work for supporting multiple different kinds of auth at the same time. for example if an operation uses\n// OAuth and HTTP bearer, how can we guarantee that the OAuth bearer is used with oauth?\n// @todo\nmodule.exports = (authKeys, operation) => {\n  if (authKeys.length === 0) {\n    return {};\n  }\n\n  const prepared = {};\n  const security = operation.prepareSecurity();\n  const securitySchemes = Object.keys(security);\n\n  if (securitySchemes.length === 0) {\n    // If there's no auth configured on this operation, don't prepare anything (even if it was supplied by the user).\n    return {};\n  }\n\n  authKeys.forEach((authKey, idx) => {\n    const schemes = security[securitySchemes[idx]];\n\n    if (schemes.length > 1) {\n      throw new Error(`Sorry, this API currently requires multiple forms of authentication which we don't yet support.`);\n    }\n\n    const scheme = schemes[0];\n\n    if (scheme.type === 'http') {\n      if (scheme.scheme === 'basic') {\n        prepared[scheme._key] = {\n          user: authKey[0],\n          pass: authKey.length === 2 ? authKey[1] : ''\n        };\n      } else if (scheme.scheme === 'bearer') {\n        if (authKey.length > 1) {\n          throw new Error('Multiple auth tokens were supplied for the auth on this endpoint, but only a single token is needed.');\n        }\n\n        prepared[scheme._key] = authKey[0];\n      }\n    } else if (scheme.type === 'oauth2') {\n      if (authKey.length > 1) {\n        throw new Error('Multiple auth tokens were supplied for the auth on this endpoint, but only a single token is needed.');\n      }\n\n      prepared[scheme._key] = authKey[0];\n    } else if (scheme.type === 'apiKey') {\n      if (authKey.length > 1) {\n        throw new Error('Multiple auth keys were supplied for the auth on this endpoint, but only a single key is needed.');\n      }\n\n      if (scheme.in === 'query' || scheme.in === 'header') {\n        prepared[scheme._key] = authKey[0];\n      }\n    } else {\n      throw new Error(`Sorry, this API currently supports a scheme, ${scheme.type}, that we don't yet support.`);\n    }\n  });\n  return prepared;\n};","map":{"version":3,"sources":["/Users/suleymantarsuslu/Desktop/graduateApp/new/graduate/node_modules/api/src/lib/prepareAuth.js"],"names":["module","exports","authKeys","operation","length","prepared","security","prepareSecurity","securitySchemes","Object","keys","forEach","authKey","idx","schemes","Error","scheme","type","_key","user","pass","in"],"mappings":"AAAA;AACA;AACA;AACA;AACAA,MAAM,CAACC,OAAP,GAAiB,CAACC,QAAD,EAAWC,SAAX,KAAyB;AACxC,MAAID,QAAQ,CAACE,MAAT,KAAoB,CAAxB,EAA2B;AACzB,WAAO,EAAP;AACD;;AAED,QAAMC,QAAQ,GAAG,EAAjB;AACA,QAAMC,QAAQ,GAAGH,SAAS,CAACI,eAAV,EAAjB;AACA,QAAMC,eAAe,GAAGC,MAAM,CAACC,IAAP,CAAYJ,QAAZ,CAAxB;;AAEA,MAAIE,eAAe,CAACJ,MAAhB,KAA2B,CAA/B,EAAkC;AAChC;AACA,WAAO,EAAP;AACD;;AAEDF,EAAAA,QAAQ,CAACS,OAAT,CAAiB,CAACC,OAAD,EAAUC,GAAV,KAAkB;AACjC,UAAMC,OAAO,GAAGR,QAAQ,CAACE,eAAe,CAACK,GAAD,CAAhB,CAAxB;;AACA,QAAIC,OAAO,CAACV,MAAR,GAAiB,CAArB,EAAwB;AACtB,YAAM,IAAIW,KAAJ,CACH,iGADG,CAAN;AAGD;;AAED,UAAMC,MAAM,GAAGF,OAAO,CAAC,CAAD,CAAtB;;AACA,QAAIE,MAAM,CAACC,IAAP,KAAgB,MAApB,EAA4B;AAC1B,UAAID,MAAM,CAACA,MAAP,KAAkB,OAAtB,EAA+B;AAC7BX,QAAAA,QAAQ,CAACW,MAAM,CAACE,IAAR,CAAR,GAAwB;AACtBC,UAAAA,IAAI,EAAEP,OAAO,CAAC,CAAD,CADS;AAEtBQ,UAAAA,IAAI,EAAER,OAAO,CAACR,MAAR,KAAmB,CAAnB,GAAuBQ,OAAO,CAAC,CAAD,CAA9B,GAAoC;AAFpB,SAAxB;AAID,OALD,MAKO,IAAII,MAAM,CAACA,MAAP,KAAkB,QAAtB,EAAgC;AACrC,YAAIJ,OAAO,CAACR,MAAR,GAAiB,CAArB,EAAwB;AACtB,gBAAM,IAAIW,KAAJ,CACJ,sGADI,CAAN;AAGD;;AAEDV,QAAAA,QAAQ,CAACW,MAAM,CAACE,IAAR,CAAR,GAAwBN,OAAO,CAAC,CAAD,CAA/B;AACD;AACF,KAfD,MAeO,IAAII,MAAM,CAACC,IAAP,KAAgB,QAApB,EAA8B;AACnC,UAAIL,OAAO,CAACR,MAAR,GAAiB,CAArB,EAAwB;AACtB,cAAM,IAAIW,KAAJ,CACJ,sGADI,CAAN;AAGD;;AAEDV,MAAAA,QAAQ,CAACW,MAAM,CAACE,IAAR,CAAR,GAAwBN,OAAO,CAAC,CAAD,CAA/B;AACD,KARM,MAQA,IAAII,MAAM,CAACC,IAAP,KAAgB,QAApB,EAA8B;AACnC,UAAIL,OAAO,CAACR,MAAR,GAAiB,CAArB,EAAwB;AACtB,cAAM,IAAIW,KAAJ,CACJ,kGADI,CAAN;AAGD;;AAED,UAAIC,MAAM,CAACK,EAAP,KAAc,OAAd,IAAyBL,MAAM,CAACK,EAAP,KAAc,QAA3C,EAAqD;AACnDhB,QAAAA,QAAQ,CAACW,MAAM,CAACE,IAAR,CAAR,GAAwBN,OAAO,CAAC,CAAD,CAA/B;AACD;AACF,KAVM,MAUA;AACL,YAAM,IAAIG,KAAJ,CAAW,gDAA+CC,MAAM,CAACC,IAAK,8BAAtE,CAAN;AACD;AACF,GA7CD;AA+CA,SAAOZ,QAAP;AACD,CA9DD","sourcesContent":["/* eslint-disable no-underscore-dangle */\n// Needs work for supporting multiple different kinds of auth at the same time. for example if an operation uses\n// OAuth and HTTP bearer, how can we guarantee that the OAuth bearer is used with oauth?\n// @todo\nmodule.exports = (authKeys, operation) => {\n  if (authKeys.length === 0) {\n    return {};\n  }\n\n  const prepared = {};\n  const security = operation.prepareSecurity();\n  const securitySchemes = Object.keys(security);\n\n  if (securitySchemes.length === 0) {\n    // If there's no auth configured on this operation, don't prepare anything (even if it was supplied by the user).\n    return {};\n  }\n\n  authKeys.forEach((authKey, idx) => {\n    const schemes = security[securitySchemes[idx]];\n    if (schemes.length > 1) {\n      throw new Error(\n        `Sorry, this API currently requires multiple forms of authentication which we don't yet support.`\n      );\n    }\n\n    const scheme = schemes[0];\n    if (scheme.type === 'http') {\n      if (scheme.scheme === 'basic') {\n        prepared[scheme._key] = {\n          user: authKey[0],\n          pass: authKey.length === 2 ? authKey[1] : '',\n        };\n      } else if (scheme.scheme === 'bearer') {\n        if (authKey.length > 1) {\n          throw new Error(\n            'Multiple auth tokens were supplied for the auth on this endpoint, but only a single token is needed.'\n          );\n        }\n\n        prepared[scheme._key] = authKey[0];\n      }\n    } else if (scheme.type === 'oauth2') {\n      if (authKey.length > 1) {\n        throw new Error(\n          'Multiple auth tokens were supplied for the auth on this endpoint, but only a single token is needed.'\n        );\n      }\n\n      prepared[scheme._key] = authKey[0];\n    } else if (scheme.type === 'apiKey') {\n      if (authKey.length > 1) {\n        throw new Error(\n          'Multiple auth keys were supplied for the auth on this endpoint, but only a single key is needed.'\n        );\n      }\n\n      if (scheme.in === 'query' || scheme.in === 'header') {\n        prepared[scheme._key] = authKey[0];\n      }\n    } else {\n      throw new Error(`Sorry, this API currently supports a scheme, ${scheme.type}, that we don't yet support.`);\n    }\n  });\n\n  return prepared;\n};\n"]},"metadata":{},"sourceType":"script"}