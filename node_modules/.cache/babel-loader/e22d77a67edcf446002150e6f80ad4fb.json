{"ast":null,"code":"\"use strict\";\n\nrequire(\"./Polyfills\");\n\nvar get = require(\"lodash.get\");\n\nvar Report = require(\"./Report\");\n\nvar FormatValidators = require(\"./FormatValidators\");\n\nvar JsonValidation = require(\"./JsonValidation\");\n\nvar SchemaCache = require(\"./SchemaCache\");\n\nvar SchemaCompilation = require(\"./SchemaCompilation\");\n\nvar SchemaValidation = require(\"./SchemaValidation\");\n\nvar Utils = require(\"./Utils\");\n\nvar Draft4Schema = require(\"./schemas/schema.json\");\n\nvar Draft4HyperSchema = require(\"./schemas/hyper-schema.json\");\n/**\n * default options\n */\n\n\nvar defaultOptions = {\n  // default timeout for all async tasks\n  asyncTimeout: 2000,\n  // force additionalProperties and additionalItems to be defined on \"object\" and \"array\" types\n  forceAdditional: false,\n  // assume additionalProperties and additionalItems are defined as \"false\" where appropriate\n  assumeAdditional: false,\n  // do case insensitive comparison for enums\n  enumCaseInsensitiveComparison: false,\n  // force items to be defined on \"array\" types\n  forceItems: false,\n  // force minItems to be defined on \"array\" types\n  forceMinItems: false,\n  // force maxItems to be defined on \"array\" types\n  forceMaxItems: false,\n  // force minLength to be defined on \"string\" types\n  forceMinLength: false,\n  // force maxLength to be defined on \"string\" types\n  forceMaxLength: false,\n  // force properties or patternProperties to be defined on \"object\" types\n  forceProperties: false,\n  // ignore references that cannot be resolved (remote schemas) // TODO: make sure this is only for remote schemas, not local ones\n  ignoreUnresolvableReferences: false,\n  // disallow usage of keywords that this validator can't handle\n  noExtraKeywords: false,\n  // disallow usage of schema's without \"type\" defined\n  noTypeless: false,\n  // disallow zero length strings in validated objects\n  noEmptyStrings: false,\n  // disallow zero length arrays in validated objects\n  noEmptyArrays: false,\n  // forces \"uri\" format to be in fully rfc3986 compliant\n  strictUris: false,\n  // turn on some of the above\n  strictMode: false,\n  // report error paths as an array of path segments to get to the offending node\n  reportPathAsArray: false,\n  // stops validation as soon as an error is found, true by default but can be turned off\n  breakOnFirstError: true,\n  // check if schema follows best practices and common sense\n  pedanticCheck: false,\n  // ignore unknown formats (do not report them as an error)\n  ignoreUnknownFormats: false,\n  // function to be called on every schema\n  customValidator: null\n};\n\nfunction normalizeOptions(options) {\n  var normalized; // options\n\n  if (typeof options === \"object\") {\n    var keys = Object.keys(options),\n        idx = keys.length,\n        key; // check that the options are correctly configured\n\n    while (idx--) {\n      key = keys[idx];\n\n      if (defaultOptions[key] === undefined) {\n        throw new Error(\"Unexpected option passed to constructor: \" + key);\n      }\n    } // copy the default options into passed options\n\n\n    keys = Object.keys(defaultOptions);\n    idx = keys.length;\n\n    while (idx--) {\n      key = keys[idx];\n\n      if (options[key] === undefined) {\n        options[key] = Utils.clone(defaultOptions[key]);\n      }\n    }\n\n    normalized = options;\n  } else {\n    normalized = Utils.clone(defaultOptions);\n  }\n\n  if (normalized.strictMode === true) {\n    normalized.forceAdditional = true;\n    normalized.forceItems = true;\n    normalized.forceMaxLength = true;\n    normalized.forceProperties = true;\n    normalized.noExtraKeywords = true;\n    normalized.noTypeless = true;\n    normalized.noEmptyStrings = true;\n    normalized.noEmptyArrays = true;\n  }\n\n  return normalized;\n}\n/**\n * @class\n *\n * @param {*} [options]\n */\n\n\nfunction ZSchema(options) {\n  this.cache = {};\n  this.referenceCache = [];\n  this.validateOptions = {};\n  this.options = normalizeOptions(options); // Disable strict validation for the built-in schemas\n\n  var metaschemaOptions = normalizeOptions({});\n  this.setRemoteReference(\"http://json-schema.org/draft-04/schema\", Draft4Schema, metaschemaOptions);\n  this.setRemoteReference(\"http://json-schema.org/draft-04/hyper-schema\", Draft4HyperSchema, metaschemaOptions);\n}\n/**\n * instance methods\n *\n * @param {*} schema\n *\n * @returns {boolean}\n */\n\n\nZSchema.prototype.compileSchema = function (schema) {\n  var report = new Report(this.options);\n  schema = SchemaCache.getSchema.call(this, report, schema);\n  SchemaCompilation.compileSchema.call(this, report, schema);\n  this.lastReport = report;\n  return report.isValid();\n};\n/**\n *\n * @param {*} schema\n *\n * @returns {boolean}\n */\n\n\nZSchema.prototype.validateSchema = function (schema) {\n  if (Array.isArray(schema) && schema.length === 0) {\n    throw new Error(\".validateSchema was called with an empty array\");\n  }\n\n  var report = new Report(this.options);\n  schema = SchemaCache.getSchema.call(this, report, schema);\n  var compiled = SchemaCompilation.compileSchema.call(this, report, schema);\n\n  if (compiled) {\n    SchemaValidation.validateSchema.call(this, report, schema);\n  }\n\n  this.lastReport = report;\n  return report.isValid();\n};\n/**\n *\n * @param {*} json\n * @param {*} schema\n * @param {*} [options]\n * @param {function(*, *)} [callback]\n *\n * @returns {boolean}\n */\n\n\nZSchema.prototype.validate = function (json, schema, options, callback) {\n  if (Utils.whatIs(options) === \"function\") {\n    callback = options;\n    options = {};\n  }\n\n  if (!options) {\n    options = {};\n  }\n\n  this.validateOptions = options;\n  var whatIs = Utils.whatIs(schema);\n\n  if (whatIs !== \"string\" && whatIs !== \"object\") {\n    var e = new Error(\"Invalid .validate call - schema must be an string or object but \" + whatIs + \" was passed!\");\n\n    if (callback) {\n      process.nextTick(function () {\n        callback(e, false);\n      });\n      return;\n    }\n\n    throw e;\n  }\n\n  var foundError = false;\n  var report = new Report(this.options);\n  report.json = json;\n\n  if (typeof schema === \"string\") {\n    var schemaName = schema;\n    schema = SchemaCache.getSchema.call(this, report, schemaName);\n\n    if (!schema) {\n      throw new Error(\"Schema with id '\" + schemaName + \"' wasn't found in the validator cache!\");\n    }\n  } else {\n    schema = SchemaCache.getSchema.call(this, report, schema);\n  }\n\n  var compiled = false;\n\n  if (!foundError) {\n    compiled = SchemaCompilation.compileSchema.call(this, report, schema);\n  }\n\n  if (!compiled) {\n    this.lastReport = report;\n    foundError = true;\n  }\n\n  var validated = false;\n\n  if (!foundError) {\n    validated = SchemaValidation.validateSchema.call(this, report, schema);\n  }\n\n  if (!validated) {\n    this.lastReport = report;\n    foundError = true;\n  }\n\n  if (options.schemaPath) {\n    report.rootSchema = schema;\n    schema = get(schema, options.schemaPath);\n\n    if (!schema) {\n      throw new Error(\"Schema path '\" + options.schemaPath + \"' wasn't found in the schema!\");\n    }\n  }\n\n  if (!foundError) {\n    JsonValidation.validate.call(this, report, schema, json);\n  }\n\n  if (callback) {\n    report.processAsyncTasks(this.options.asyncTimeout, callback);\n    return;\n  } else if (report.asyncTasks.length > 0) {\n    throw new Error(\"This validation has async tasks and cannot be done in sync mode, please provide callback argument.\");\n  } // assign lastReport so errors are retrievable in sync mode\n\n\n  this.lastReport = report;\n  return report.isValid();\n};\n\nZSchema.prototype.getLastError = function () {\n  if (this.lastReport.errors.length === 0) {\n    return null;\n  }\n\n  var e = new Error();\n  e.name = \"z-schema validation error\";\n  e.message = this.lastReport.commonErrorMessage;\n  e.details = this.lastReport.errors;\n  return e;\n};\n\nZSchema.prototype.getLastErrors = function () {\n  return this.lastReport && this.lastReport.errors.length > 0 ? this.lastReport.errors : null;\n};\n\nZSchema.prototype.getMissingReferences = function (arr) {\n  arr = arr || this.lastReport.errors;\n  var res = [],\n      idx = arr.length;\n\n  while (idx--) {\n    var error = arr[idx];\n\n    if (error.code === \"UNRESOLVABLE_REFERENCE\") {\n      var reference = error.params[0];\n\n      if (res.indexOf(reference) === -1) {\n        res.push(reference);\n      }\n    }\n\n    if (error.inner) {\n      res = res.concat(this.getMissingReferences(error.inner));\n    }\n  }\n\n  return res;\n};\n\nZSchema.prototype.getMissingRemoteReferences = function () {\n  var missingReferences = this.getMissingReferences(),\n      missingRemoteReferences = [],\n      idx = missingReferences.length;\n\n  while (idx--) {\n    var remoteReference = SchemaCache.getRemotePath(missingReferences[idx]);\n\n    if (remoteReference && missingRemoteReferences.indexOf(remoteReference) === -1) {\n      missingRemoteReferences.push(remoteReference);\n    }\n  }\n\n  return missingRemoteReferences;\n};\n\nZSchema.prototype.setRemoteReference = function (uri, schema, validationOptions) {\n  if (typeof schema === \"string\") {\n    schema = JSON.parse(schema);\n  } else {\n    schema = Utils.cloneDeep(schema);\n  }\n\n  if (validationOptions) {\n    schema.__$validationOptions = normalizeOptions(validationOptions);\n  }\n\n  SchemaCache.cacheSchemaByUri.call(this, uri, schema);\n};\n\nZSchema.prototype.getResolvedSchema = function (schema) {\n  var report = new Report(this.options);\n  schema = SchemaCache.getSchema.call(this, report, schema); // clone before making any modifications\n\n  schema = Utils.cloneDeep(schema);\n  var visited = []; // clean-up the schema and resolve references\n\n  var cleanup = function (schema) {\n    var key,\n        typeOf = Utils.whatIs(schema);\n\n    if (typeOf !== \"object\" && typeOf !== \"array\") {\n      return;\n    }\n\n    if (schema.___$visited) {\n      return;\n    }\n\n    schema.___$visited = true;\n    visited.push(schema);\n\n    if (schema.$ref && schema.__$refResolved) {\n      var from = schema.__$refResolved;\n      var to = schema;\n      delete schema.$ref;\n      delete schema.__$refResolved;\n\n      for (key in from) {\n        if (from.hasOwnProperty(key)) {\n          to[key] = from[key];\n        }\n      }\n    }\n\n    for (key in schema) {\n      if (schema.hasOwnProperty(key)) {\n        if (key.indexOf(\"__$\") === 0) {\n          delete schema[key];\n        } else {\n          cleanup(schema[key]);\n        }\n      }\n    }\n  };\n\n  cleanup(schema);\n  visited.forEach(function (s) {\n    delete s.___$visited;\n  });\n  this.lastReport = report;\n\n  if (report.isValid()) {\n    return schema;\n  } else {\n    throw this.getLastError();\n  }\n};\n/**\n *\n * @param {*} schemaReader\n *\n * @returns {void}\n */\n\n\nZSchema.prototype.setSchemaReader = function (schemaReader) {\n  return ZSchema.setSchemaReader(schemaReader);\n};\n\nZSchema.prototype.getSchemaReader = function () {\n  return ZSchema.schemaReader;\n};\n\nZSchema.schemaReader = undefined;\n/*\n    static methods\n*/\n\nZSchema.setSchemaReader = function (schemaReader) {\n  ZSchema.schemaReader = schemaReader;\n};\n\nZSchema.registerFormat = function (formatName, validatorFunction) {\n  FormatValidators[formatName] = validatorFunction;\n};\n\nZSchema.unregisterFormat = function (formatName) {\n  delete FormatValidators[formatName];\n};\n\nZSchema.getRegisteredFormats = function () {\n  return Object.keys(FormatValidators);\n};\n\nZSchema.getDefaultOptions = function () {\n  return Utils.cloneDeep(defaultOptions);\n};\n\nZSchema.schemaSymbol = Utils.schemaSymbol;\nZSchema.jsonSymbol = Utils.jsonSymbol;\nmodule.exports = ZSchema;","map":{"version":3,"sources":["/Users/suleymantarsuslu/Desktop/graduateApp/new/graduate/node_modules/z-schema/src/ZSchema.js"],"names":["require","get","Report","FormatValidators","JsonValidation","SchemaCache","SchemaCompilation","SchemaValidation","Utils","Draft4Schema","Draft4HyperSchema","defaultOptions","asyncTimeout","forceAdditional","assumeAdditional","enumCaseInsensitiveComparison","forceItems","forceMinItems","forceMaxItems","forceMinLength","forceMaxLength","forceProperties","ignoreUnresolvableReferences","noExtraKeywords","noTypeless","noEmptyStrings","noEmptyArrays","strictUris","strictMode","reportPathAsArray","breakOnFirstError","pedanticCheck","ignoreUnknownFormats","customValidator","normalizeOptions","options","normalized","keys","Object","idx","length","key","undefined","Error","clone","ZSchema","cache","referenceCache","validateOptions","metaschemaOptions","setRemoteReference","prototype","compileSchema","schema","report","getSchema","call","lastReport","isValid","validateSchema","Array","isArray","compiled","validate","json","callback","whatIs","e","process","nextTick","foundError","schemaName","validated","schemaPath","rootSchema","processAsyncTasks","asyncTasks","getLastError","errors","name","message","commonErrorMessage","details","getLastErrors","getMissingReferences","arr","res","error","code","reference","params","indexOf","push","inner","concat","getMissingRemoteReferences","missingReferences","missingRemoteReferences","remoteReference","getRemotePath","uri","validationOptions","JSON","parse","cloneDeep","__$validationOptions","cacheSchemaByUri","getResolvedSchema","visited","cleanup","typeOf","___$visited","$ref","__$refResolved","from","to","hasOwnProperty","forEach","s","setSchemaReader","schemaReader","getSchemaReader","registerFormat","formatName","validatorFunction","unregisterFormat","getRegisteredFormats","getDefaultOptions","schemaSymbol","jsonSymbol","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\nrequire(\"./Polyfills\");\nvar get               = require(\"lodash.get\");\nvar Report            = require(\"./Report\");\nvar FormatValidators  = require(\"./FormatValidators\");\nvar JsonValidation    = require(\"./JsonValidation\");\nvar SchemaCache       = require(\"./SchemaCache\");\nvar SchemaCompilation = require(\"./SchemaCompilation\");\nvar SchemaValidation  = require(\"./SchemaValidation\");\nvar Utils             = require(\"./Utils\");\nvar Draft4Schema      = require(\"./schemas/schema.json\");\nvar Draft4HyperSchema = require(\"./schemas/hyper-schema.json\");\n\n/**\n * default options\n */\nvar defaultOptions = {\n    // default timeout for all async tasks\n    asyncTimeout: 2000,\n    // force additionalProperties and additionalItems to be defined on \"object\" and \"array\" types\n    forceAdditional: false,\n    // assume additionalProperties and additionalItems are defined as \"false\" where appropriate\n    assumeAdditional: false,\n    // do case insensitive comparison for enums\n    enumCaseInsensitiveComparison: false,\n    // force items to be defined on \"array\" types\n    forceItems: false,\n    // force minItems to be defined on \"array\" types\n    forceMinItems: false,\n    // force maxItems to be defined on \"array\" types\n    forceMaxItems: false,\n    // force minLength to be defined on \"string\" types\n    forceMinLength: false,\n    // force maxLength to be defined on \"string\" types\n    forceMaxLength: false,\n    // force properties or patternProperties to be defined on \"object\" types\n    forceProperties: false,\n    // ignore references that cannot be resolved (remote schemas) // TODO: make sure this is only for remote schemas, not local ones\n    ignoreUnresolvableReferences: false,\n    // disallow usage of keywords that this validator can't handle\n    noExtraKeywords: false,\n    // disallow usage of schema's without \"type\" defined\n    noTypeless: false,\n    // disallow zero length strings in validated objects\n    noEmptyStrings: false,\n    // disallow zero length arrays in validated objects\n    noEmptyArrays: false,\n    // forces \"uri\" format to be in fully rfc3986 compliant\n    strictUris: false,\n    // turn on some of the above\n    strictMode: false,\n    // report error paths as an array of path segments to get to the offending node\n    reportPathAsArray: false,\n    // stops validation as soon as an error is found, true by default but can be turned off\n    breakOnFirstError: true,\n    // check if schema follows best practices and common sense\n    pedanticCheck: false,\n    // ignore unknown formats (do not report them as an error)\n    ignoreUnknownFormats: false,\n    // function to be called on every schema\n    customValidator: null\n};\n\nfunction normalizeOptions(options) {\n    var normalized;\n\n    // options\n    if (typeof options === \"object\") {\n        var keys = Object.keys(options),\n            idx = keys.length,\n            key;\n\n        // check that the options are correctly configured\n        while (idx--) {\n            key = keys[idx];\n            if (defaultOptions[key] === undefined) {\n                throw new Error(\"Unexpected option passed to constructor: \" + key);\n            }\n        }\n\n        // copy the default options into passed options\n        keys = Object.keys(defaultOptions);\n        idx = keys.length;\n        while (idx--) {\n            key = keys[idx];\n            if (options[key] === undefined) {\n                options[key] = Utils.clone(defaultOptions[key]);\n            }\n        }\n\n        normalized = options;\n    } else {\n        normalized = Utils.clone(defaultOptions);\n    }\n\n    if (normalized.strictMode === true) {\n        normalized.forceAdditional  = true;\n        normalized.forceItems       = true;\n        normalized.forceMaxLength   = true;\n        normalized.forceProperties  = true;\n        normalized.noExtraKeywords  = true;\n        normalized.noTypeless       = true;\n        normalized.noEmptyStrings   = true;\n        normalized.noEmptyArrays    = true;\n    }\n\n    return normalized;\n}\n\n/**\n * @class\n *\n * @param {*} [options]\n */\nfunction ZSchema(options) {\n    this.cache = {};\n    this.referenceCache = [];\n    this.validateOptions = {};\n\n    this.options = normalizeOptions(options);\n\n    // Disable strict validation for the built-in schemas\n    var metaschemaOptions = normalizeOptions({ });\n\n    this.setRemoteReference(\"http://json-schema.org/draft-04/schema\", Draft4Schema, metaschemaOptions);\n    this.setRemoteReference(\"http://json-schema.org/draft-04/hyper-schema\", Draft4HyperSchema, metaschemaOptions);\n}\n\n/**\n * instance methods\n *\n * @param {*} schema\n *\n * @returns {boolean}\n */\nZSchema.prototype.compileSchema = function (schema) {\n    var report = new Report(this.options);\n\n    schema = SchemaCache.getSchema.call(this, report, schema);\n\n    SchemaCompilation.compileSchema.call(this, report, schema);\n\n    this.lastReport = report;\n    return report.isValid();\n};\n\n/**\n *\n * @param {*} schema\n *\n * @returns {boolean}\n */\nZSchema.prototype.validateSchema = function (schema) {\n    if (Array.isArray(schema) && schema.length === 0) {\n        throw new Error(\".validateSchema was called with an empty array\");\n    }\n\n    var report = new Report(this.options);\n\n    schema = SchemaCache.getSchema.call(this, report, schema);\n\n    var compiled = SchemaCompilation.compileSchema.call(this, report, schema);\n    if (compiled) { SchemaValidation.validateSchema.call(this, report, schema); }\n\n    this.lastReport = report;\n    return report.isValid();\n};\n\n/**\n *\n * @param {*} json\n * @param {*} schema\n * @param {*} [options]\n * @param {function(*, *)} [callback]\n *\n * @returns {boolean}\n */\nZSchema.prototype.validate = function (json, schema, options, callback) {\n\n    if (Utils.whatIs(options) === \"function\") {\n        callback = options;\n        options = {};\n    }\n    if (!options) { options = {}; }\n\n    this.validateOptions = options;\n\n    var whatIs = Utils.whatIs(schema);\n    if (whatIs !== \"string\" && whatIs !== \"object\") {\n        var e = new Error(\"Invalid .validate call - schema must be an string or object but \" + whatIs + \" was passed!\");\n        if (callback) {\n            process.nextTick(function () {\n                callback(e, false);\n            });\n            return;\n        }\n        throw e;\n    }\n\n    var foundError = false;\n    var report = new Report(this.options);\n    report.json = json;\n\n    if (typeof schema === \"string\") {\n        var schemaName = schema;\n        schema = SchemaCache.getSchema.call(this, report, schemaName);\n        if (!schema) {\n            throw new Error(\"Schema with id '\" + schemaName + \"' wasn't found in the validator cache!\");\n        }\n    } else {\n        schema = SchemaCache.getSchema.call(this, report, schema);\n    }\n\n    var compiled = false;\n    if (!foundError) {\n        compiled = SchemaCompilation.compileSchema.call(this, report, schema);\n    }\n    if (!compiled) {\n        this.lastReport = report;\n        foundError = true;\n    }\n\n    var validated = false;\n    if (!foundError) {\n        validated = SchemaValidation.validateSchema.call(this, report, schema);\n    }\n    if (!validated) {\n        this.lastReport = report;\n        foundError = true;\n    }\n\n    if (options.schemaPath) {\n        report.rootSchema = schema;\n        schema = get(schema, options.schemaPath);\n        if (!schema) {\n            throw new Error(\"Schema path '\" + options.schemaPath + \"' wasn't found in the schema!\");\n        }\n    }\n\n    if (!foundError) {\n        JsonValidation.validate.call(this, report, schema, json);\n    }\n\n    if (callback) {\n        report.processAsyncTasks(this.options.asyncTimeout, callback);\n        return;\n    } else if (report.asyncTasks.length > 0) {\n        throw new Error(\"This validation has async tasks and cannot be done in sync mode, please provide callback argument.\");\n    }\n\n    // assign lastReport so errors are retrievable in sync mode\n    this.lastReport = report;\n    return report.isValid();\n};\nZSchema.prototype.getLastError = function () {\n    if (this.lastReport.errors.length === 0) {\n        return null;\n    }\n    var e = new Error();\n    e.name = \"z-schema validation error\";\n    e.message = this.lastReport.commonErrorMessage;\n    e.details = this.lastReport.errors;\n    return e;\n};\nZSchema.prototype.getLastErrors = function () {\n    return this.lastReport && this.lastReport.errors.length > 0 ? this.lastReport.errors : null;\n};\nZSchema.prototype.getMissingReferences = function (arr) {\n    arr = arr || this.lastReport.errors;\n    var res = [],\n        idx = arr.length;\n    while (idx--) {\n        var error = arr[idx];\n        if (error.code === \"UNRESOLVABLE_REFERENCE\") {\n            var reference = error.params[0];\n            if (res.indexOf(reference) === -1) {\n                res.push(reference);\n            }\n        }\n        if (error.inner) {\n            res = res.concat(this.getMissingReferences(error.inner));\n        }\n    }\n    return res;\n};\nZSchema.prototype.getMissingRemoteReferences = function () {\n    var missingReferences = this.getMissingReferences(),\n        missingRemoteReferences = [],\n        idx = missingReferences.length;\n    while (idx--) {\n        var remoteReference = SchemaCache.getRemotePath(missingReferences[idx]);\n        if (remoteReference && missingRemoteReferences.indexOf(remoteReference) === -1) {\n            missingRemoteReferences.push(remoteReference);\n        }\n    }\n    return missingRemoteReferences;\n};\nZSchema.prototype.setRemoteReference = function (uri, schema, validationOptions) {\n    if (typeof schema === \"string\") {\n        schema = JSON.parse(schema);\n    } else {\n        schema = Utils.cloneDeep(schema);\n    }\n\n    if (validationOptions) {\n        schema.__$validationOptions = normalizeOptions(validationOptions);\n    }\n\n    SchemaCache.cacheSchemaByUri.call(this, uri, schema);\n};\nZSchema.prototype.getResolvedSchema = function (schema) {\n    var report = new Report(this.options);\n    schema = SchemaCache.getSchema.call(this, report, schema);\n\n    // clone before making any modifications\n    schema = Utils.cloneDeep(schema);\n\n    var visited = [];\n\n    // clean-up the schema and resolve references\n    var cleanup = function (schema) {\n        var key,\n            typeOf = Utils.whatIs(schema);\n        if (typeOf !== \"object\" && typeOf !== \"array\") {\n            return;\n        }\n\n        if (schema.___$visited) {\n            return;\n        }\n\n        schema.___$visited = true;\n        visited.push(schema);\n\n        if (schema.$ref && schema.__$refResolved) {\n            var from = schema.__$refResolved;\n            var to = schema;\n            delete schema.$ref;\n            delete schema.__$refResolved;\n            for (key in from) {\n                if (from.hasOwnProperty(key)) {\n                    to[key] = from[key];\n                }\n            }\n        }\n        for (key in schema) {\n            if (schema.hasOwnProperty(key)) {\n                if (key.indexOf(\"__$\") === 0) {\n                    delete schema[key];\n                } else {\n                    cleanup(schema[key]);\n                }\n            }\n        }\n    };\n\n    cleanup(schema);\n    visited.forEach(function (s) {\n        delete s.___$visited;\n    });\n\n    this.lastReport = report;\n    if (report.isValid()) {\n        return schema;\n    } else {\n        throw this.getLastError();\n    }\n};\n\n/**\n *\n * @param {*} schemaReader\n *\n * @returns {void}\n */\nZSchema.prototype.setSchemaReader = function (schemaReader) {\n    return ZSchema.setSchemaReader(schemaReader);\n};\n\nZSchema.prototype.getSchemaReader = function () {\n    return ZSchema.schemaReader;\n};\n\nZSchema.schemaReader = undefined;\n/*\n    static methods\n*/\nZSchema.setSchemaReader = function (schemaReader) {\n    ZSchema.schemaReader = schemaReader;\n};\nZSchema.registerFormat = function (formatName, validatorFunction) {\n    FormatValidators[formatName] = validatorFunction;\n};\nZSchema.unregisterFormat = function (formatName) {\n    delete FormatValidators[formatName];\n};\nZSchema.getRegisteredFormats = function () {\n    return Object.keys(FormatValidators);\n};\nZSchema.getDefaultOptions = function () {\n    return Utils.cloneDeep(defaultOptions);\n};\n\nZSchema.schemaSymbol = Utils.schemaSymbol;\n\nZSchema.jsonSymbol = Utils.jsonSymbol;\n\nmodule.exports = ZSchema;\n"]},"metadata":{},"sourceType":"script"}