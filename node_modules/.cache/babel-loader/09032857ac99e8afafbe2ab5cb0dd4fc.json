{"ast":null,"code":"function isEmptyObject(obj) {\n  // Then remove all empty objects from the top level object\n  return typeof obj === 'object' && Object.keys(obj).length === 0;\n} // Modified from here: https://stackoverflow.com/a/43781499\n\n\nfunction stripEmptyObjects(obj) {\n  let cleanObj = obj;\n  Object.keys(cleanObj).forEach(key => {\n    let value = cleanObj[key];\n\n    if (typeof value === 'object' && !Array.isArray(cleanObj) && value !== null) {\n      // Recurse, strip out empty objects from children\n      value = stripEmptyObjects(value); // Then remove all empty objects from the top level object\n\n      if (isEmptyObject(value)) {\n        delete cleanObj[key];\n      } else {\n        cleanObj[key] = value;\n      }\n    } else if (value === null) {\n      delete cleanObj[key];\n    }\n  });\n\n  if (Array.isArray(cleanObj)) {\n    // Since deleting a key from an array will retain an undefined value in that array, we need to\n    // filter them out.\n    cleanObj = cleanObj.filter(function (el) {\n      return el !== undefined;\n    });\n  }\n\n  return cleanObj;\n}\n\nfunction removeUndefinedObjects(obj) {\n  // JSON.stringify removes undefined values. Though `[undefined]` will be converted with this to\n  // `[null]`, we'll clean that up next.\n  let withoutUndefined = JSON.parse(JSON.stringify(obj)); // Then we recursively remove all empty objects and nullish arrays.\n\n  withoutUndefined = stripEmptyObjects(withoutUndefined); // If the only thing that's leftover is an empty object\n  // then return nothing so we don't end up with default\n  // code samples with:\n  // --data '{}'\n\n  if (isEmptyObject(withoutUndefined)) return undefined;\n  return withoutUndefined;\n}\n\nmodule.exports = removeUndefinedObjects;","map":{"version":3,"sources":["/Users/suleymantarsuslu/Desktop/graduateApp/new/graduate/node_modules/@readme/oas-to-har/src/lib/remove-undefined-objects.js"],"names":["isEmptyObject","obj","Object","keys","length","stripEmptyObjects","cleanObj","forEach","key","value","Array","isArray","filter","el","undefined","removeUndefinedObjects","withoutUndefined","JSON","parse","stringify","module","exports"],"mappings":"AAAA,SAASA,aAAT,CAAuBC,GAAvB,EAA4B;AAC1B;AACA,SAAO,OAAOA,GAAP,KAAe,QAAf,IAA2BC,MAAM,CAACC,IAAP,CAAYF,GAAZ,EAAiBG,MAAjB,KAA4B,CAA9D;AACD,C,CAED;;;AACA,SAASC,iBAAT,CAA2BJ,GAA3B,EAAgC;AAC9B,MAAIK,QAAQ,GAAGL,GAAf;AAEAC,EAAAA,MAAM,CAACC,IAAP,CAAYG,QAAZ,EAAsBC,OAAtB,CAA8BC,GAAG,IAAI;AACnC,QAAIC,KAAK,GAAGH,QAAQ,CAACE,GAAD,CAApB;;AAEA,QAAI,OAAOC,KAAP,KAAiB,QAAjB,IAA6B,CAACC,KAAK,CAACC,OAAN,CAAcL,QAAd,CAA9B,IAAyDG,KAAK,KAAK,IAAvE,EAA6E;AAC3E;AACAA,MAAAA,KAAK,GAAGJ,iBAAiB,CAACI,KAAD,CAAzB,CAF2E,CAI3E;;AACA,UAAIT,aAAa,CAACS,KAAD,CAAjB,EAA0B;AACxB,eAAOH,QAAQ,CAACE,GAAD,CAAf;AACD,OAFD,MAEO;AACLF,QAAAA,QAAQ,CAACE,GAAD,CAAR,GAAgBC,KAAhB;AACD;AACF,KAVD,MAUO,IAAIA,KAAK,KAAK,IAAd,EAAoB;AACzB,aAAOH,QAAQ,CAACE,GAAD,CAAf;AACD;AACF,GAhBD;;AAkBA,MAAIE,KAAK,CAACC,OAAN,CAAcL,QAAd,CAAJ,EAA6B;AAC3B;AACA;AACAA,IAAAA,QAAQ,GAAGA,QAAQ,CAACM,MAAT,CAAgB,UAAUC,EAAV,EAAc;AACvC,aAAOA,EAAE,KAAKC,SAAd;AACD,KAFU,CAAX;AAGD;;AAED,SAAOR,QAAP;AACD;;AAED,SAASS,sBAAT,CAAgCd,GAAhC,EAAqC;AACnC;AACA;AACA,MAAIe,gBAAgB,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAelB,GAAf,CAAX,CAAvB,CAHmC,CAKnC;;AACAe,EAAAA,gBAAgB,GAAGX,iBAAiB,CAACW,gBAAD,CAApC,CANmC,CAQnC;AACA;AACA;AACA;;AACA,MAAIhB,aAAa,CAACgB,gBAAD,CAAjB,EAAqC,OAAOF,SAAP;AAErC,SAAOE,gBAAP;AACD;;AAEDI,MAAM,CAACC,OAAP,GAAiBN,sBAAjB","sourcesContent":["function isEmptyObject(obj) {\n  // Then remove all empty objects from the top level object\n  return typeof obj === 'object' && Object.keys(obj).length === 0;\n}\n\n// Modified from here: https://stackoverflow.com/a/43781499\nfunction stripEmptyObjects(obj) {\n  let cleanObj = obj;\n\n  Object.keys(cleanObj).forEach(key => {\n    let value = cleanObj[key];\n\n    if (typeof value === 'object' && !Array.isArray(cleanObj) && value !== null) {\n      // Recurse, strip out empty objects from children\n      value = stripEmptyObjects(value);\n\n      // Then remove all empty objects from the top level object\n      if (isEmptyObject(value)) {\n        delete cleanObj[key];\n      } else {\n        cleanObj[key] = value;\n      }\n    } else if (value === null) {\n      delete cleanObj[key];\n    }\n  });\n\n  if (Array.isArray(cleanObj)) {\n    // Since deleting a key from an array will retain an undefined value in that array, we need to\n    // filter them out.\n    cleanObj = cleanObj.filter(function (el) {\n      return el !== undefined;\n    });\n  }\n\n  return cleanObj;\n}\n\nfunction removeUndefinedObjects(obj) {\n  // JSON.stringify removes undefined values. Though `[undefined]` will be converted with this to\n  // `[null]`, we'll clean that up next.\n  let withoutUndefined = JSON.parse(JSON.stringify(obj));\n\n  // Then we recursively remove all empty objects and nullish arrays.\n  withoutUndefined = stripEmptyObjects(withoutUndefined);\n\n  // If the only thing that's leftover is an empty object\n  // then return nothing so we don't end up with default\n  // code samples with:\n  // --data '{}'\n  if (isEmptyObject(withoutUndefined)) return undefined;\n\n  return withoutUndefined;\n}\n\nmodule.exports = removeUndefinedObjects;\n"]},"metadata":{},"sourceType":"script"}