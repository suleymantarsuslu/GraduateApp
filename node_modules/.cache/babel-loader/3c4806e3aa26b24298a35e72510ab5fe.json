{"ast":null,"code":"\"use strict\";\n\nconst {\n  Ono\n} = require(\"@jsdevtools/ono\");\n\nconst {\n  stripHash,\n  toFileSystemPath\n} = require(\"./url\");\n\nconst JSONParserError = exports.JSONParserError = class JSONParserError extends Error {\n  constructor(message, source) {\n    super();\n    this.code = \"EUNKNOWN\";\n    this.message = message;\n    this.source = source;\n    this.path = [];\n    Ono.extend(this);\n  }\n\n};\nsetErrorName(JSONParserError);\nconst JSONParserErrorGroup = exports.JSONParserErrorGroup = class JSONParserErrorGroup extends Error {\n  constructor(parser) {\n    super();\n    this.files = parser;\n    this.message = `${this.errors.length} error${this.errors.length > 1 ? \"s\" : \"\"} occurred while reading '${toFileSystemPath(parser.$refs._root$Ref.path)}'`;\n    Ono.extend(this);\n  }\n\n  static getParserErrors(parser) {\n    const errors = [];\n\n    for (const $ref of Object.values(parser.$refs._$refs)) {\n      if ($ref.errors) {\n        errors.push(...$ref.errors);\n      }\n    }\n\n    return errors;\n  }\n\n  get errors() {\n    return JSONParserErrorGroup.getParserErrors(this.files);\n  }\n\n};\nsetErrorName(JSONParserErrorGroup);\nconst ParserError = exports.ParserError = class ParserError extends JSONParserError {\n  constructor(message, source) {\n    super(`Error parsing ${source}: ${message}`, source);\n    this.code = \"EPARSER\";\n  }\n\n};\nsetErrorName(ParserError);\nconst UnmatchedParserError = exports.UnmatchedParserError = class UnmatchedParserError extends JSONParserError {\n  constructor(source) {\n    super(`Could not find parser for \"${source}\"`, source);\n    this.code = \"EUNMATCHEDPARSER\";\n  }\n\n};\nsetErrorName(UnmatchedParserError);\nconst ResolverError = exports.ResolverError = class ResolverError extends JSONParserError {\n  constructor(ex, source) {\n    super(ex.message || `Error reading file \"${source}\"`, source);\n    this.code = \"ERESOLVER\";\n\n    if (\"code\" in ex) {\n      this.ioErrorCode = String(ex.code);\n    }\n  }\n\n};\nsetErrorName(ResolverError);\nconst UnmatchedResolverError = exports.UnmatchedResolverError = class UnmatchedResolverError extends JSONParserError {\n  constructor(source) {\n    super(`Could not find resolver for \"${source}\"`, source);\n    this.code = \"EUNMATCHEDRESOLVER\";\n  }\n\n};\nsetErrorName(UnmatchedResolverError);\nconst MissingPointerError = exports.MissingPointerError = class MissingPointerError extends JSONParserError {\n  constructor(token, path) {\n    super(`Token \"${token}\" does not exist.`, stripHash(path));\n    this.code = \"EMISSINGPOINTER\";\n  }\n\n};\nsetErrorName(MissingPointerError);\nconst InvalidPointerError = exports.InvalidPointerError = class InvalidPointerError extends JSONParserError {\n  constructor(pointer, path) {\n    super(`Invalid $ref pointer \"${pointer}\". Pointers must begin with \"#/\"`, stripHash(path));\n    this.code = \"EINVALIDPOINTER\";\n  }\n\n};\nsetErrorName(InvalidPointerError);\n\nfunction setErrorName(err) {\n  Object.defineProperty(err.prototype, \"name\", {\n    value: err.name,\n    enumerable: true\n  });\n}\n\nexports.isHandledError = function (err) {\n  return err instanceof JSONParserError || err instanceof JSONParserErrorGroup;\n};","map":{"version":3,"sources":["/Users/suleymantarsuslu/Desktop/graduateApp/new/graduate/node_modules/@apidevtools/json-schema-ref-parser/lib/util/errors.js"],"names":["Ono","require","stripHash","toFileSystemPath","JSONParserError","exports","Error","constructor","message","source","code","path","extend","setErrorName","JSONParserErrorGroup","parser","files","errors","length","$refs","_root$Ref","getParserErrors","$ref","Object","values","_$refs","push","ParserError","UnmatchedParserError","ResolverError","ex","ioErrorCode","String","UnmatchedResolverError","MissingPointerError","token","InvalidPointerError","pointer","err","defineProperty","prototype","value","name","enumerable","isHandledError"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconst { Ono } = require(\"@jsdevtools/ono\");\n\nconst { stripHash, toFileSystemPath } = require(\"./url\");\n\nconst JSONParserError = exports.JSONParserError = class JSONParserError extends Error {\n  constructor (message, source) {\n    super();\n\n    this.code = \"EUNKNOWN\";\n    this.message = message;\n    this.source = source;\n    this.path = [];\n\n    Ono.extend(this);\n  }\n};\n\nsetErrorName(JSONParserError);\n\nconst JSONParserErrorGroup = exports.JSONParserErrorGroup = class JSONParserErrorGroup extends Error {\n  constructor (parser) {\n    super();\n\n    this.files = parser;\n    this.message = `${this.errors.length} error${this.errors.length > 1 ? \"s\" : \"\"} occurred while reading '${toFileSystemPath(parser.$refs._root$Ref.path)}'`;\n\n    Ono.extend(this);\n  }\n\n  static getParserErrors (parser) {\n    const errors = [];\n\n    for (const $ref of Object.values(parser.$refs._$refs)) {\n      if ($ref.errors) {\n        errors.push(...$ref.errors);\n      }\n    }\n\n    return errors;\n  }\n\n  get errors () {\n    return JSONParserErrorGroup.getParserErrors(this.files);\n  }\n};\n\nsetErrorName(JSONParserErrorGroup);\n\nconst ParserError = exports.ParserError = class ParserError extends JSONParserError {\n  constructor (message, source) {\n    super(`Error parsing ${source}: ${message}`, source);\n\n    this.code = \"EPARSER\";\n  }\n};\n\nsetErrorName(ParserError);\n\nconst UnmatchedParserError = exports.UnmatchedParserError = class UnmatchedParserError extends JSONParserError {\n  constructor (source) {\n    super(`Could not find parser for \"${source}\"`, source);\n\n    this.code = \"EUNMATCHEDPARSER\";\n  }\n};\n\nsetErrorName(UnmatchedParserError);\n\nconst ResolverError = exports.ResolverError = class ResolverError extends JSONParserError {\n  constructor (ex, source) {\n    super(ex.message || `Error reading file \"${source}\"`, source);\n\n    this.code = \"ERESOLVER\";\n\n    if (\"code\" in ex) {\n      this.ioErrorCode = String(ex.code);\n    }\n  }\n};\n\nsetErrorName(ResolverError);\n\nconst UnmatchedResolverError = exports.UnmatchedResolverError = class UnmatchedResolverError extends JSONParserError {\n  constructor (source) {\n    super(`Could not find resolver for \"${source}\"`, source);\n\n    this.code = \"EUNMATCHEDRESOLVER\";\n  }\n};\n\nsetErrorName(UnmatchedResolverError);\n\nconst MissingPointerError = exports.MissingPointerError = class MissingPointerError extends JSONParserError {\n  constructor (token, path) {\n    super(`Token \"${token}\" does not exist.`, stripHash(path));\n\n    this.code = \"EMISSINGPOINTER\";\n  }\n};\n\nsetErrorName(MissingPointerError);\n\nconst InvalidPointerError = exports.InvalidPointerError = class InvalidPointerError extends JSONParserError {\n  constructor (pointer, path) {\n    super(`Invalid $ref pointer \"${pointer}\". Pointers must begin with \"#/\"`, stripHash(path));\n\n    this.code = \"EINVALIDPOINTER\";\n  }\n};\n\nsetErrorName(InvalidPointerError);\n\nfunction setErrorName (err) {\n  Object.defineProperty(err.prototype, \"name\", {\n    value: err.name,\n    enumerable: true,\n  });\n}\n\nexports.isHandledError = function (err) {\n  return err instanceof JSONParserError || err instanceof JSONParserErrorGroup;\n};\n"]},"metadata":{},"sourceType":"script"}