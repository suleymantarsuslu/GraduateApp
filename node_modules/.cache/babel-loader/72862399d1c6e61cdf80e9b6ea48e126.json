{"ast":null,"code":"\"use strict\";\n\nvar reducible = require(\"reducible/reducible\");\n\nvar reduce = require(\"reducible/reduce\");\n\nvar isError = require(\"reducible/is-error\");\n\nvar end = require(\"reducible/end\");\n\nfunction drop(source, n) {\n  /**\n  Returns sequence of all `source`'s items after `n`-th one. If source contains\n  less then `n` items empty sequence is returned.\n   ## Example\n   print(drop([ 1, 2, 3, 4 ], 2))  // => <stream 3 4 />\n  print(drop([ 1, 2, 3 ], 5))     // => <stream />\n  **/\n  // If drop `<= 0` then optimize by returning source itself. If `Infinity`\n  // return empty.\n  if (n <= 0) return source;\n  if (n === Infinity) return void 0;\n  return reducible(function reduceDrop(next, initial) {\n    var count = n;\n    reduce(source, function reduceDropSource(value, result) {\n      // If value is end of collection or is an error (which also includes\n      // end of collection) just pass it through, `reducible` will take care\n      // of everything.\n      if (value === end) return next(value, result);\n      if (isError(value)) return next(value, result); // If count of items has reached `0` just keep on passing values.\n\n      if (count === 0) return next(value, result); // Otherwise just decrement count and return `result`.\n\n      count = count - 1;\n      return result;\n    }, initial);\n  });\n}\n\nmodule.exports = drop;","map":{"version":3,"sources":["/Users/suleymantarsuslu/Desktop/graduateApp/new/graduate/node_modules/reducers/drop.js"],"names":["reducible","require","reduce","isError","end","drop","source","n","Infinity","reduceDrop","next","initial","count","reduceDropSource","value","result","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,SAAS,GAAGC,OAAO,CAAC,qBAAD,CAAvB;;AACA,IAAIC,MAAM,GAAGD,OAAO,CAAC,kBAAD,CAApB;;AACA,IAAIE,OAAO,GAAGF,OAAO,CAAC,oBAAD,CAArB;;AACA,IAAIG,GAAG,GAAGH,OAAO,CAAC,eAAD,CAAjB;;AAEA,SAASI,IAAT,CAAcC,MAAd,EAAsBC,CAAtB,EAAyB;AACvB;;;;;;;AAUA;AACA;AACA,MAAIA,CAAC,IAAI,CAAT,EAAY,OAAOD,MAAP;AACZ,MAAIC,CAAC,KAAKC,QAAV,EAAoB,OAAO,KAAK,CAAZ;AACpB,SAAOR,SAAS,CAAC,SAASS,UAAT,CAAoBC,IAApB,EAA0BC,OAA1B,EAAmC;AAClD,QAAIC,KAAK,GAAGL,CAAZ;AACAL,IAAAA,MAAM,CAACI,MAAD,EAAS,SAASO,gBAAT,CAA0BC,KAA1B,EAAiCC,MAAjC,EAAyC;AACtD;AACA;AACA;AACA,UAAID,KAAK,KAAKV,GAAd,EAAmB,OAAOM,IAAI,CAACI,KAAD,EAAQC,MAAR,CAAX;AACnB,UAAIZ,OAAO,CAACW,KAAD,CAAX,EAAoB,OAAOJ,IAAI,CAACI,KAAD,EAAQC,MAAR,CAAX,CALkC,CAMtD;;AACA,UAAIH,KAAK,KAAK,CAAd,EAAiB,OAAOF,IAAI,CAACI,KAAD,EAAQC,MAAR,CAAX,CAPqC,CAQtD;;AACAH,MAAAA,KAAK,GAAGA,KAAK,GAAG,CAAhB;AACA,aAAOG,MAAP;AACD,KAXK,EAWHJ,OAXG,CAAN;AAYD,GAde,CAAhB;AAeD;;AAEDK,MAAM,CAACC,OAAP,GAAiBZ,IAAjB","sourcesContent":["\"use strict\";\n\nvar reducible = require(\"reducible/reducible\")\nvar reduce = require(\"reducible/reduce\")\nvar isError = require(\"reducible/is-error\")\nvar end = require(\"reducible/end\")\n\nfunction drop(source, n) {\n  /**\n  Returns sequence of all `source`'s items after `n`-th one. If source contains\n  less then `n` items empty sequence is returned.\n\n  ## Example\n\n  print(drop([ 1, 2, 3, 4 ], 2))  // => <stream 3 4 />\n  print(drop([ 1, 2, 3 ], 5))     // => <stream />\n  **/\n\n  // If drop `<= 0` then optimize by returning source itself. If `Infinity`\n  // return empty.\n  if (n <= 0) return source\n  if (n === Infinity) return void(0)\n  return reducible(function reduceDrop(next, initial) {\n    var count = n\n    reduce(source, function reduceDropSource(value, result) {\n      // If value is end of collection or is an error (which also includes\n      // end of collection) just pass it through, `reducible` will take care\n      // of everything.\n      if (value === end) return next(value, result)\n      if (isError(value)) return next(value, result)\n      // If count of items has reached `0` just keep on passing values.\n      if (count === 0) return next(value, result)\n      // Otherwise just decrement count and return `result`.\n      count = count - 1\n      return result\n    }, initial)\n  })\n}\n\nmodule.exports = drop\n"]},"metadata":{},"sourceType":"script"}