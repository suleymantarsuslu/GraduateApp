{"ast":null,"code":"\"use strict\";\n\nvar reducible = require(\"reducible/reducible\");\n\nvar reduce = require(\"reducible/reduce\");\n\nvar isError = require(\"reducible/is-error\");\n\nvar end = require(\"reducible/end\");\n\nfunction dropWhile(source, predicate) {\n  /**\n  Returns a sequence of the items in `source` starting from the first\n  item for which `predicate(item)` returns `false`.\n   ## Example\n   var numbers = dropWhile([ 2, 7, 10, 23 ], function(value) {\n    return value < 10\n  })\n  print(numbers)   // => < 10 23 >\n  **/\n  return reducible(function reduceDropWhile(next, initial) {\n    var dropped = false;\n    reduce(source, function reduceDropWhileSource(value, result) {\n      // If value is end of collection or is an error (which also includes\n      // end of collection) just pass it through, `reducible` will take care\n      // of everything.\n      if (value === end) return next(value, result);\n      if (isError(value)) return next(value, result); // If already dropped all the intended items (if `dropped` is already\n      // being set to `true` or if current predicate returns `false`). Then\n      // just keep on passing values.\n\n      if (dropped || (dropped = !predicate(value))) return next(value, result);\n      return result;\n    }, initial);\n  });\n}\n\nmodule.exports = dropWhile;","map":{"version":3,"sources":["/Users/suleymantarsuslu/Desktop/graduateApp/new/graduate/node_modules/reducers/drop-while.js"],"names":["reducible","require","reduce","isError","end","dropWhile","source","predicate","reduceDropWhile","next","initial","dropped","reduceDropWhileSource","value","result","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,SAAS,GAAGC,OAAO,CAAC,qBAAD,CAAvB;;AACA,IAAIC,MAAM,GAAGD,OAAO,CAAC,kBAAD,CAApB;;AACA,IAAIE,OAAO,GAAGF,OAAO,CAAC,oBAAD,CAArB;;AACA,IAAIG,GAAG,GAAGH,OAAO,CAAC,eAAD,CAAjB;;AAEA,SAASI,SAAT,CAAmBC,MAAnB,EAA2BC,SAA3B,EAAsC;AACpC;;;;;;;;;AAWA,SAAOP,SAAS,CAAC,SAASQ,eAAT,CAAyBC,IAAzB,EAA+BC,OAA/B,EAAwC;AACvD,QAAIC,OAAO,GAAG,KAAd;AACAT,IAAAA,MAAM,CAACI,MAAD,EAAS,SAASM,qBAAT,CAA+BC,KAA/B,EAAsCC,MAAtC,EAA8C;AAC3D;AACA;AACA;AACA,UAAID,KAAK,KAAKT,GAAd,EAAmB,OAAOK,IAAI,CAACI,KAAD,EAAQC,MAAR,CAAX;AACnB,UAAIX,OAAO,CAACU,KAAD,CAAX,EAAoB,OAAOJ,IAAI,CAACI,KAAD,EAAQC,MAAR,CAAX,CALuC,CAO3D;AACA;AACA;;AACA,UAAIH,OAAO,KAAKA,OAAO,GAAG,CAACJ,SAAS,CAACM,KAAD,CAAzB,CAAX,EAA8C,OAAOJ,IAAI,CAACI,KAAD,EAAQC,MAAR,CAAX;AAE9C,aAAOA,MAAP;AACD,KAbK,EAaHJ,OAbG,CAAN;AAcD,GAhBe,CAAhB;AAiBD;;AAEDK,MAAM,CAACC,OAAP,GAAiBX,SAAjB","sourcesContent":["\"use strict\";\n\nvar reducible = require(\"reducible/reducible\")\nvar reduce = require(\"reducible/reduce\")\nvar isError = require(\"reducible/is-error\")\nvar end = require(\"reducible/end\")\n\nfunction dropWhile(source, predicate) {\n  /**\n  Returns a sequence of the items in `source` starting from the first\n  item for which `predicate(item)` returns `false`.\n\n  ## Example\n\n  var numbers = dropWhile([ 2, 7, 10, 23 ], function(value) {\n    return value < 10\n  })\n  print(numbers)   // => < 10 23 >\n  **/\n  return reducible(function reduceDropWhile(next, initial) {\n    var dropped = false\n    reduce(source, function reduceDropWhileSource(value, result) {\n      // If value is end of collection or is an error (which also includes\n      // end of collection) just pass it through, `reducible` will take care\n      // of everything.\n      if (value === end) return next(value, result)\n      if (isError(value)) return next(value, result)\n\n      // If already dropped all the intended items (if `dropped` is already\n      // being set to `true` or if current predicate returns `false`). Then\n      // just keep on passing values.\n      if (dropped || (dropped = !predicate(value))) return next(value, result)\n\n      return result\n    }, initial)\n  })\n}\n\nmodule.exports = dropWhile\n"]},"metadata":{},"sourceType":"script"}