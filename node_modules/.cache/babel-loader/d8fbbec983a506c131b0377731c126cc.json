{"ast":null,"code":"\"use strict\";\n\nexports.jsonSymbol = Symbol.for(\"z-schema/json\");\nexports.schemaSymbol = Symbol.for(\"z-schema/schema\");\n/**\n * @param {object} obj\n *\n * @returns {string[]}\n */\n\nvar sortedKeys = exports.sortedKeys = function (obj) {\n  return Object.keys(obj).sort();\n};\n/**\n *\n * @param {string} uri\n *\n * @returns {boolean}\n */\n\n\nexports.isAbsoluteUri = function (uri) {\n  return /^https?:\\/\\//.test(uri);\n};\n/**\n *\n * @param {string} uri\n *\n * @returns {boolean}\n */\n\n\nexports.isRelativeUri = function (uri) {\n  // relative URIs that end with a hash sign, issue #56\n  return /.+#/.test(uri);\n};\n\nexports.whatIs = function (what) {\n  var to = typeof what;\n\n  if (to === \"object\") {\n    if (what === null) {\n      return \"null\";\n    }\n\n    if (Array.isArray(what)) {\n      return \"array\";\n    }\n\n    return \"object\"; // typeof what === 'object' && what === Object(what) && !Array.isArray(what);\n  }\n\n  if (to === \"number\") {\n    if (Number.isFinite(what)) {\n      if (what % 1 === 0) {\n        return \"integer\";\n      } else {\n        return \"number\";\n      }\n    }\n\n    if (Number.isNaN(what)) {\n      return \"not-a-number\";\n    }\n\n    return \"unknown-number\";\n  }\n\n  return to; // undefined, boolean, string, function\n};\n/**\n *\n * @param {*} json1\n * @param {*} json2\n * @param {*} [options]\n *\n * @returns {boolean}\n */\n\n\nexports.areEqual = function areEqual(json1, json2, options) {\n  options = options || {};\n  var caseInsensitiveComparison = options.caseInsensitiveComparison || false; // http://json-schema.org/latest/json-schema-core.html#rfc.section.3.6\n  // Two JSON values are said to be equal if and only if:\n  // both are nulls; or\n  // both are booleans, and have the same value; or\n  // both are strings, and have the same value; or\n  // both are numbers, and have the same mathematical value; or\n\n  if (json1 === json2) {\n    return true;\n  }\n\n  if (caseInsensitiveComparison === true && typeof json1 === \"string\" && typeof json2 === \"string\" && json1.toUpperCase() === json2.toUpperCase()) {\n    return true;\n  }\n\n  var i, len; // both are arrays, and:\n\n  if (Array.isArray(json1) && Array.isArray(json2)) {\n    // have the same number of items; and\n    if (json1.length !== json2.length) {\n      return false;\n    } // items at the same index are equal according to this definition; or\n\n\n    len = json1.length;\n\n    for (i = 0; i < len; i++) {\n      if (!areEqual(json1[i], json2[i], {\n        caseInsensitiveComparison: caseInsensitiveComparison\n      })) {\n        return false;\n      }\n    }\n\n    return true;\n  } // both are objects, and:\n\n\n  if (exports.whatIs(json1) === \"object\" && exports.whatIs(json2) === \"object\") {\n    // have the same set of property names; and\n    var keys1 = sortedKeys(json1);\n    var keys2 = sortedKeys(json2);\n\n    if (!areEqual(keys1, keys2, {\n      caseInsensitiveComparison: caseInsensitiveComparison\n    })) {\n      return false;\n    } // values for a same property name are equal according to this definition.\n\n\n    len = keys1.length;\n\n    for (i = 0; i < len; i++) {\n      if (!areEqual(json1[keys1[i]], json2[keys1[i]], {\n        caseInsensitiveComparison: caseInsensitiveComparison\n      })) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n};\n/**\n *\n * @param {*[]} arr\n * @param {number[]} [indexes]\n *\n * @returns {boolean}\n */\n\n\nexports.isUniqueArray = function (arr, indexes) {\n  var i,\n      j,\n      l = arr.length;\n\n  for (i = 0; i < l; i++) {\n    for (j = i + 1; j < l; j++) {\n      if (exports.areEqual(arr[i], arr[j])) {\n        if (indexes) {\n          indexes.push(i, j);\n        }\n\n        return false;\n      }\n    }\n  }\n\n  return true;\n};\n/**\n *\n * @param {*} bigSet\n * @param {*} subSet\n *\n * @returns {*[]}\n */\n\n\nexports.difference = function (bigSet, subSet) {\n  var arr = [],\n      idx = bigSet.length;\n\n  while (idx--) {\n    if (subSet.indexOf(bigSet[idx]) === -1) {\n      arr.push(bigSet[idx]);\n    }\n  }\n\n  return arr;\n}; // NOT a deep version of clone\n\n\nexports.clone = function (src) {\n  if (typeof src === \"undefined\") {\n    return void 0;\n  }\n\n  if (typeof src !== \"object\" || src === null) {\n    return src;\n  }\n\n  var res, idx;\n\n  if (Array.isArray(src)) {\n    res = [];\n    idx = src.length;\n\n    while (idx--) {\n      res[idx] = src[idx];\n    }\n  } else {\n    res = {};\n    var keys = Object.keys(src);\n    idx = keys.length;\n\n    while (idx--) {\n      var key = keys[idx];\n      res[key] = src[key];\n    }\n  }\n\n  return res;\n};\n\nexports.cloneDeep = function (src) {\n  var vidx = 0,\n      visited = new Map(),\n      cloned = [];\n\n  function cloneDeep(src) {\n    if (typeof src !== \"object\" || src === null) {\n      return src;\n    }\n\n    var res, idx, cidx;\n    cidx = visited.get(src);\n\n    if (cidx !== undefined) {\n      return cloned[cidx];\n    }\n\n    visited.set(src, vidx++);\n\n    if (Array.isArray(src)) {\n      res = [];\n      cloned.push(res);\n      idx = src.length;\n\n      while (idx--) {\n        res[idx] = cloneDeep(src[idx]);\n      }\n    } else {\n      res = {};\n      cloned.push(res);\n      var keys = Object.keys(src);\n      idx = keys.length;\n\n      while (idx--) {\n        var key = keys[idx];\n        res[key] = cloneDeep(src[key]);\n      }\n    }\n\n    return res;\n  }\n\n  return cloneDeep(src);\n};\n/*\n  following function comes from punycode.js library\n  see: https://github.com/bestiejs/punycode.js\n*/\n\n/*jshint -W016*/\n\n/**\n * Creates an array containing the numeric code points of each Unicode\n * character in the string. While JavaScript uses UCS-2 internally,\n * this function will convert a pair of surrogate halves (each of which\n * UCS-2 exposes as separate characters) into a single code point,\n * matching UTF-16.\n * @see `punycode.ucs2.encode`\n * @see <https://mathiasbynens.be/notes/javascript-encoding>\n * @memberOf punycode.ucs2\n * @name decode\n * @param {String} string The Unicode input string (UCS-2).\n * @returns {Array} The new array of code points.\n */\n\n\nexports.ucs2decode = function (string) {\n  var output = [],\n      counter = 0,\n      length = string.length,\n      value,\n      extra;\n\n  while (counter < length) {\n    value = string.charCodeAt(counter++);\n\n    if (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n      // high surrogate, and there is a next character\n      extra = string.charCodeAt(counter++);\n\n      if ((extra & 0xFC00) == 0xDC00) {\n        // low surrogate\n        output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n      } else {\n        // unmatched surrogate; only append this code unit, in case the next\n        // code unit is the high surrogate of a surrogate pair\n        output.push(value);\n        counter--;\n      }\n    } else {\n      output.push(value);\n    }\n  }\n\n  return output;\n};\n/*jshint +W016*/","map":{"version":3,"sources":["/Users/suleymantarsuslu/Desktop/graduateApp/new/graduate/node_modules/z-schema/src/Utils.js"],"names":["exports","jsonSymbol","Symbol","for","schemaSymbol","sortedKeys","obj","Object","keys","sort","isAbsoluteUri","uri","test","isRelativeUri","whatIs","what","to","Array","isArray","Number","isFinite","isNaN","areEqual","json1","json2","options","caseInsensitiveComparison","toUpperCase","i","len","length","keys1","keys2","isUniqueArray","arr","indexes","j","l","push","difference","bigSet","subSet","idx","indexOf","clone","src","res","key","cloneDeep","vidx","visited","Map","cloned","cidx","get","undefined","set","ucs2decode","string","output","counter","value","extra","charCodeAt"],"mappings":"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","sourcesContent":["\"use strict\";\n\nexports.jsonSymbol = Symbol.for(\"z-schema/json\");\n\nexports.schemaSymbol = Symbol.for(\"z-schema/schema\");\n\n/**\n * @param {object} obj\n *\n * @returns {string[]}\n */\nvar sortedKeys = exports.sortedKeys = function (obj) {\n    return Object.keys(obj).sort();\n};\n\n/**\n *\n * @param {string} uri\n *\n * @returns {boolean}\n */\nexports.isAbsoluteUri = function (uri) {\n    return /^https?:\\/\\//.test(uri);\n};\n\n/**\n *\n * @param {string} uri\n *\n * @returns {boolean}\n */\nexports.isRelativeUri = function (uri) {\n    // relative URIs that end with a hash sign, issue #56\n    return /.+#/.test(uri);\n};\n\nexports.whatIs = function (what) {\n\n    var to = typeof what;\n\n    if (to === \"object\") {\n        if (what === null) {\n            return \"null\";\n        }\n        if (Array.isArray(what)) {\n            return \"array\";\n        }\n        return \"object\"; // typeof what === 'object' && what === Object(what) && !Array.isArray(what);\n    }\n\n    if (to === \"number\") {\n        if (Number.isFinite(what)) {\n            if (what % 1 === 0) {\n                return \"integer\";\n            } else {\n                return \"number\";\n            }\n        }\n        if (Number.isNaN(what)) {\n            return \"not-a-number\";\n        }\n        return \"unknown-number\";\n    }\n\n    return to; // undefined, boolean, string, function\n\n};\n\n/**\n *\n * @param {*} json1\n * @param {*} json2\n * @param {*} [options]\n *\n * @returns {boolean}\n */\nexports.areEqual = function areEqual(json1, json2, options) {\n\n    options = options || {};\n    var caseInsensitiveComparison = options.caseInsensitiveComparison || false;\n\n    // http://json-schema.org/latest/json-schema-core.html#rfc.section.3.6\n\n    // Two JSON values are said to be equal if and only if:\n    // both are nulls; or\n    // both are booleans, and have the same value; or\n    // both are strings, and have the same value; or\n    // both are numbers, and have the same mathematical value; or\n    if (json1 === json2) {\n        return true;\n    }\n    if (\n      caseInsensitiveComparison === true &&\n      typeof json1 === \"string\" && typeof json2 === \"string\" &&\n      json1.toUpperCase() === json2.toUpperCase()) {\n        return true;\n    }\n\n    var i, len;\n\n    // both are arrays, and:\n    if (Array.isArray(json1) && Array.isArray(json2)) {\n        // have the same number of items; and\n        if (json1.length !== json2.length) {\n            return false;\n        }\n        // items at the same index are equal according to this definition; or\n        len = json1.length;\n        for (i = 0; i < len; i++) {\n            if (!areEqual(json1[i], json2[i], { caseInsensitiveComparison: caseInsensitiveComparison })) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    // both are objects, and:\n    if (exports.whatIs(json1) === \"object\" && exports.whatIs(json2) === \"object\") {\n        // have the same set of property names; and\n        var keys1 = sortedKeys(json1);\n        var keys2 = sortedKeys(json2);\n        if (!areEqual(keys1, keys2, { caseInsensitiveComparison: caseInsensitiveComparison })) {\n            return false;\n        }\n        // values for a same property name are equal according to this definition.\n        len = keys1.length;\n        for (i = 0; i < len; i++) {\n            if (!areEqual(json1[keys1[i]], json2[keys1[i]], { caseInsensitiveComparison: caseInsensitiveComparison })) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    return false;\n};\n\n/**\n *\n * @param {*[]} arr\n * @param {number[]} [indexes]\n *\n * @returns {boolean}\n */\nexports.isUniqueArray = function (arr, indexes) {\n    var i, j, l = arr.length;\n    for (i = 0; i < l; i++) {\n        for (j = i + 1; j < l; j++) {\n            if (exports.areEqual(arr[i], arr[j])) {\n                if (indexes) { indexes.push(i, j); }\n                return false;\n            }\n        }\n    }\n    return true;\n};\n\n/**\n *\n * @param {*} bigSet\n * @param {*} subSet\n *\n * @returns {*[]}\n */\nexports.difference = function (bigSet, subSet) {\n    var arr = [],\n        idx = bigSet.length;\n    while (idx--) {\n        if (subSet.indexOf(bigSet[idx]) === -1) {\n            arr.push(bigSet[idx]);\n        }\n    }\n    return arr;\n};\n\n// NOT a deep version of clone\nexports.clone = function (src) {\n    if (typeof src === \"undefined\") { return void 0; }\n    if (typeof src !== \"object\" || src === null) { return src; }\n    var res, idx;\n    if (Array.isArray(src)) {\n        res = [];\n        idx = src.length;\n        while (idx--) {\n            res[idx] = src[idx];\n        }\n    } else {\n        res = {};\n        var keys = Object.keys(src);\n        idx = keys.length;\n        while (idx--) {\n            var key = keys[idx];\n            res[key] = src[key];\n        }\n    }\n    return res;\n};\n\nexports.cloneDeep = function (src) {\n    var vidx = 0, visited = new Map(), cloned = [];\n    function cloneDeep(src) {\n        if (typeof src !== \"object\" || src === null) { return src; }\n        var res, idx, cidx;\n\n        cidx = visited.get(src);\n        if (cidx !== undefined) { return cloned[cidx]; }\n\n        visited.set(src, vidx++);\n        if (Array.isArray(src)) {\n            res = [];\n            cloned.push(res);\n            idx = src.length;\n            while (idx--) {\n                res[idx] = cloneDeep(src[idx]);\n            }\n        } else {\n            res = {};\n            cloned.push(res);\n            var keys = Object.keys(src);\n            idx = keys.length;\n            while (idx--) {\n                var key = keys[idx];\n                res[key] = cloneDeep(src[key]);\n            }\n        }\n        return res;\n    }\n    return cloneDeep(src);\n};\n\n/*\n  following function comes from punycode.js library\n  see: https://github.com/bestiejs/punycode.js\n*/\n/*jshint -W016*/\n/**\n * Creates an array containing the numeric code points of each Unicode\n * character in the string. While JavaScript uses UCS-2 internally,\n * this function will convert a pair of surrogate halves (each of which\n * UCS-2 exposes as separate characters) into a single code point,\n * matching UTF-16.\n * @see `punycode.ucs2.encode`\n * @see <https://mathiasbynens.be/notes/javascript-encoding>\n * @memberOf punycode.ucs2\n * @name decode\n * @param {String} string The Unicode input string (UCS-2).\n * @returns {Array} The new array of code points.\n */\nexports.ucs2decode = function (string) {\n    var output = [],\n        counter = 0,\n        length = string.length,\n        value,\n        extra;\n    while (counter < length) {\n        value = string.charCodeAt(counter++);\n        if (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n            // high surrogate, and there is a next character\n            extra = string.charCodeAt(counter++);\n            if ((extra & 0xFC00) == 0xDC00) { // low surrogate\n                output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n            } else {\n                // unmatched surrogate; only append this code unit, in case the next\n                // code unit is the high surrogate of a surrogate pair\n                output.push(value);\n                counter--;\n            }\n        } else {\n            output.push(value);\n        }\n    }\n    return output;\n};\n/*jshint +W016*/\n"]},"metadata":{},"sourceType":"script"}