{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _invariant = require('invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nvar _DOMUtils = require('./DOMUtils');\n\nvar _ExecutionEnvironment = require('./ExecutionEnvironment');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar startListener = function startListener(getPromptMessage) {\n  var handleBeforeUnload = function handleBeforeUnload(event) {\n    var message = getPromptMessage();\n\n    if (typeof message === 'string') {\n      (event || window.event).returnValue = message;\n      return message;\n    }\n\n    return undefined;\n  };\n\n  (0, _DOMUtils.addEventListener)(window, 'beforeunload', handleBeforeUnload);\n  return function () {\n    return (0, _DOMUtils.removeEventListener)(window, 'beforeunload', handleBeforeUnload);\n  };\n};\n/**\n * Returns a new createHistory function that can be used to create\n * history objects that know how to use the beforeunload event in web\n * browsers to cancel navigation.\n */\n\n\nvar useBeforeUnload = function useBeforeUnload(createHistory) {\n  !_ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, 'useBeforeUnload only works in DOM environments') : (0, _invariant2.default)(false) : void 0;\n  return function (options) {\n    var history = createHistory(options);\n    var listeners = [];\n    var stopListener = void 0;\n\n    var getPromptMessage = function getPromptMessage() {\n      var message = void 0;\n\n      for (var i = 0, len = listeners.length; message == null && i < len; ++i) {\n        message = listeners[i].call();\n      }\n\n      return message;\n    };\n\n    var listenBeforeUnload = function listenBeforeUnload(listener) {\n      if (listeners.push(listener) === 1) stopListener = startListener(getPromptMessage);\n      return function () {\n        listeners = listeners.filter(function (item) {\n          return item !== listener;\n        });\n\n        if (listeners.length === 0 && stopListener) {\n          stopListener();\n          stopListener = null;\n        }\n      };\n    };\n\n    return _extends({}, history, {\n      listenBeforeUnload: listenBeforeUnload\n    });\n  };\n};\n\nexports.default = useBeforeUnload;","map":{"version":3,"sources":["/Users/suleymantarsuslu/Desktop/graduateApp/new/graduate/node_modules/history/lib/useBeforeUnload.js"],"names":["exports","__esModule","_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","_invariant","require","_invariant2","_interopRequireDefault","_DOMUtils","_ExecutionEnvironment","obj","default","startListener","getPromptMessage","handleBeforeUnload","event","message","window","returnValue","undefined","addEventListener","removeEventListener","useBeforeUnload","createHistory","canUseDOM","process","env","NODE_ENV","options","history","listeners","stopListener","len","listenBeforeUnload","listener","push","filter","item"],"mappings":"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","sourcesContent":["'use strict';\n\nexports.__esModule = true;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _invariant = require('invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nvar _DOMUtils = require('./DOMUtils');\n\nvar _ExecutionEnvironment = require('./ExecutionEnvironment');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar startListener = function startListener(getPromptMessage) {\n  var handleBeforeUnload = function handleBeforeUnload(event) {\n    var message = getPromptMessage();\n\n    if (typeof message === 'string') {\n      (event || window.event).returnValue = message;\n      return message;\n    }\n\n    return undefined;\n  };\n\n  (0, _DOMUtils.addEventListener)(window, 'beforeunload', handleBeforeUnload);\n\n  return function () {\n    return (0, _DOMUtils.removeEventListener)(window, 'beforeunload', handleBeforeUnload);\n  };\n};\n\n/**\n * Returns a new createHistory function that can be used to create\n * history objects that know how to use the beforeunload event in web\n * browsers to cancel navigation.\n */\nvar useBeforeUnload = function useBeforeUnload(createHistory) {\n  !_ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, 'useBeforeUnload only works in DOM environments') : (0, _invariant2.default)(false) : void 0;\n\n  return function (options) {\n    var history = createHistory(options);\n\n    var listeners = [];\n    var stopListener = void 0;\n\n    var getPromptMessage = function getPromptMessage() {\n      var message = void 0;\n      for (var i = 0, len = listeners.length; message == null && i < len; ++i) {\n        message = listeners[i].call();\n      }return message;\n    };\n\n    var listenBeforeUnload = function listenBeforeUnload(listener) {\n      if (listeners.push(listener) === 1) stopListener = startListener(getPromptMessage);\n\n      return function () {\n        listeners = listeners.filter(function (item) {\n          return item !== listener;\n        });\n\n        if (listeners.length === 0 && stopListener) {\n          stopListener();\n          stopListener = null;\n        }\n      };\n    };\n\n    return _extends({}, history, {\n      listenBeforeUnload: listenBeforeUnload\n    });\n  };\n};\n\nexports.default = useBeforeUnload;"]},"metadata":{},"sourceType":"script"}