{"ast":null,"code":"\"use strict\";\n\nmodule.exports = Pointer;\n\nconst $Ref = require(\"./ref\");\n\nconst url = require(\"./util/url\");\n\nconst {\n  ono\n} = require(\"@jsdevtools/ono\");\n\nconst slashes = /\\//g;\nconst tildes = /~/g;\nconst escapedSlash = /~1/g;\nconst escapedTilde = /~0/g;\n/**\n * This class represents a single JSON pointer and its resolved value.\n *\n * @param {$Ref} $ref\n * @param {string} path\n * @param {string} [friendlyPath] - The original user-specified path (used for error messages)\n * @constructor\n */\n\nfunction Pointer($ref, path, friendlyPath) {\n  /**\n   * The {@link $Ref} object that contains this {@link Pointer} object.\n   * @type {$Ref}\n   */\n  this.$ref = $ref;\n  /**\n   * The file path or URL, containing the JSON pointer in the hash.\n   * This path is relative to the path of the main JSON schema file.\n   * @type {string}\n   */\n\n  this.path = path;\n  /**\n   * The original path or URL, used for error messages.\n   * @type {string}\n   */\n\n  this.originalPath = friendlyPath || path;\n  /**\n   * The value of the JSON pointer.\n   * Can be any JSON type, not just objects. Unknown file types are represented as Buffers (byte arrays).\n   * @type {?*}\n   */\n\n  this.value = undefined;\n  /**\n   * Indicates whether the pointer references itself.\n   * @type {boolean}\n   */\n\n  this.circular = false;\n  /**\n   * The number of indirect references that were traversed to resolve the value.\n   * Resolving a single pointer may require resolving multiple $Refs.\n   * @type {number}\n   */\n\n  this.indirections = 0;\n}\n/**\n * Resolves the value of a nested property within the given object.\n *\n * @param {*} obj - The object that will be crawled\n * @param {$RefParserOptions} options\n *\n * @returns {Pointer}\n * Returns a JSON pointer whose {@link Pointer#value} is the resolved value.\n * If resolving this value required resolving other JSON references, then\n * the {@link Pointer#$ref} and {@link Pointer#path} will reflect the resolution path\n * of the resolved value.\n */\n\n\nPointer.prototype.resolve = function (obj, options) {\n  let tokens = Pointer.parse(this.path); // Crawl the object, one token at a time\n\n  this.value = obj;\n\n  for (let i = 0; i < tokens.length; i++) {\n    if (resolveIf$Ref(this, options)) {\n      // The $ref path has changed, so append the remaining tokens to the path\n      this.path = Pointer.join(this.path, tokens.slice(i));\n    }\n\n    let token = tokens[i];\n\n    if (this.value[token] === undefined) {\n      throw ono.syntax(`Error resolving $ref pointer \"${this.originalPath}\". \\nToken \"${token}\" does not exist.`);\n    } else {\n      this.value = this.value[token];\n    }\n  } // Resolve the final value\n\n\n  resolveIf$Ref(this, options);\n  return this;\n};\n/**\n * Sets the value of a nested property within the given object.\n *\n * @param {*} obj - The object that will be crawled\n * @param {*} value - the value to assign\n * @param {$RefParserOptions} options\n *\n * @returns {*}\n * Returns the modified object, or an entirely new object if the entire object is overwritten.\n */\n\n\nPointer.prototype.set = function (obj, value, options) {\n  let tokens = Pointer.parse(this.path);\n  let token;\n\n  if (tokens.length === 0) {\n    // There are no tokens, replace the entire object with the new value\n    this.value = value;\n    return value;\n  } // Crawl the object, one token at a time\n\n\n  this.value = obj;\n\n  for (let i = 0; i < tokens.length - 1; i++) {\n    resolveIf$Ref(this, options);\n    token = tokens[i];\n\n    if (this.value && this.value[token] !== undefined) {\n      // The token exists\n      this.value = this.value[token];\n    } else {\n      // The token doesn't exist, so create it\n      this.value = setValue(this, token, {});\n    }\n  } // Set the value of the final token\n\n\n  resolveIf$Ref(this, options);\n  token = tokens[tokens.length - 1];\n  setValue(this, token, value); // Return the updated object\n\n  return obj;\n};\n/**\n * Parses a JSON pointer (or a path containing a JSON pointer in the hash)\n * and returns an array of the pointer's tokens.\n * (e.g. \"schema.json#/definitions/person/name\" => [\"definitions\", \"person\", \"name\"])\n *\n * The pointer is parsed according to RFC 6901\n * {@link https://tools.ietf.org/html/rfc6901#section-3}\n *\n * @param {string} path\n * @returns {string[]}\n */\n\n\nPointer.parse = function (path) {\n  // Get the JSON pointer from the path's hash\n  let pointer = url.getHash(path).substr(1); // If there's no pointer, then there are no tokens,\n  // so return an empty array\n\n  if (!pointer) {\n    return [];\n  } // Split into an array\n\n\n  pointer = pointer.split(\"/\"); // Decode each part, according to RFC 6901\n\n  for (let i = 0; i < pointer.length; i++) {\n    pointer[i] = decodeURIComponent(pointer[i].replace(escapedSlash, \"/\").replace(escapedTilde, \"~\"));\n  }\n\n  if (pointer[0] !== \"\") {\n    throw ono.syntax(`Invalid $ref pointer \"${pointer}\". Pointers must begin with \"#/\"`);\n  }\n\n  return pointer.slice(1);\n};\n/**\n * Creates a JSON pointer path, by joining one or more tokens to a base path.\n *\n * @param {string} base - The base path (e.g. \"schema.json#/definitions/person\")\n * @param {string|string[]} tokens - The token(s) to append (e.g. [\"name\", \"first\"])\n * @returns {string}\n */\n\n\nPointer.join = function (base, tokens) {\n  // Ensure that the base path contains a hash\n  if (base.indexOf(\"#\") === -1) {\n    base += \"#\";\n  } // Append each token to the base path\n\n\n  tokens = Array.isArray(tokens) ? tokens : [tokens];\n\n  for (let i = 0; i < tokens.length; i++) {\n    let token = tokens[i]; // Encode the token, according to RFC 6901\n\n    base += \"/\" + encodeURIComponent(token.replace(tildes, \"~0\").replace(slashes, \"~1\"));\n  }\n\n  return base;\n};\n/**\n * If the given pointer's {@link Pointer#value} is a JSON reference,\n * then the reference is resolved and {@link Pointer#value} is replaced with the resolved value.\n * In addition, {@link Pointer#path} and {@link Pointer#$ref} are updated to reflect the\n * resolution path of the new value.\n *\n * @param {Pointer} pointer\n * @param {$RefParserOptions} options\n * @returns {boolean} - Returns `true` if the resolution path changed\n */\n\n\nfunction resolveIf$Ref(pointer, options) {\n  // Is the value a JSON reference? (and allowed?)\n  if ($Ref.isAllowed$Ref(pointer.value, options)) {\n    let $refPath = url.resolve(pointer.path, pointer.value.$ref);\n\n    if ($refPath === pointer.path) {\n      // The value is a reference to itself, so there's nothing to do.\n      pointer.circular = true;\n    } else {\n      let resolved = pointer.$ref.$refs._resolve($refPath, options);\n\n      pointer.indirections += resolved.indirections + 1;\n\n      if ($Ref.isExtended$Ref(pointer.value)) {\n        // This JSON reference \"extends\" the resolved value, rather than simply pointing to it.\n        // So the resolved path does NOT change.  Just the value does.\n        pointer.value = $Ref.dereference(pointer.value, resolved.value);\n        return false;\n      } else {\n        // Resolve the reference\n        pointer.$ref = resolved.$ref;\n        pointer.path = resolved.path;\n        pointer.value = resolved.value;\n      }\n\n      return true;\n    }\n  }\n}\n/**\n * Sets the specified token value of the {@link Pointer#value}.\n *\n * The token is evaluated according to RFC 6901.\n * {@link https://tools.ietf.org/html/rfc6901#section-4}\n *\n * @param {Pointer} pointer - The JSON Pointer whose value will be modified\n * @param {string} token - A JSON Pointer token that indicates how to modify `obj`\n * @param {*} value - The value to assign\n * @returns {*} - Returns the assigned value\n */\n\n\nfunction setValue(pointer, token, value) {\n  if (pointer.value && typeof pointer.value === \"object\") {\n    if (token === \"-\" && Array.isArray(pointer.value)) {\n      pointer.value.push(value);\n    } else {\n      pointer.value[token] = value;\n    }\n  } else {\n    throw ono.syntax(`Error assigning $ref pointer \"${pointer.path}\". \\nCannot set \"${token}\" of a non-object.`);\n  }\n\n  return value;\n}","map":{"version":3,"sources":["/Users/suleymantarsuslu/Desktop/graduateApp/new/graduate/node_modules/@apidevtools/swagger-parser/node_modules/@apidevtools/json-schema-ref-parser/lib/pointer.js"],"names":["module","exports","Pointer","$Ref","require","url","ono","slashes","tildes","escapedSlash","escapedTilde","$ref","path","friendlyPath","originalPath","value","undefined","circular","indirections","prototype","resolve","obj","options","tokens","parse","i","length","resolveIf$Ref","join","slice","token","syntax","set","setValue","pointer","getHash","substr","split","decodeURIComponent","replace","base","indexOf","Array","isArray","encodeURIComponent","isAllowed$Ref","$refPath","resolved","$refs","_resolve","isExtended$Ref","dereference","push"],"mappings":"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","sourcesContent":["\"use strict\";\n\nmodule.exports = Pointer;\n\nconst $Ref = require(\"./ref\");\nconst url = require(\"./util/url\");\nconst { ono } = require(\"@jsdevtools/ono\");\nconst slashes = /\\//g;\nconst tildes = /~/g;\nconst escapedSlash = /~1/g;\nconst escapedTilde = /~0/g;\n\n/**\n * This class represents a single JSON pointer and its resolved value.\n *\n * @param {$Ref} $ref\n * @param {string} path\n * @param {string} [friendlyPath] - The original user-specified path (used for error messages)\n * @constructor\n */\nfunction Pointer ($ref, path, friendlyPath) {\n  /**\n   * The {@link $Ref} object that contains this {@link Pointer} object.\n   * @type {$Ref}\n   */\n  this.$ref = $ref;\n\n  /**\n   * The file path or URL, containing the JSON pointer in the hash.\n   * This path is relative to the path of the main JSON schema file.\n   * @type {string}\n   */\n  this.path = path;\n\n  /**\n   * The original path or URL, used for error messages.\n   * @type {string}\n   */\n  this.originalPath = friendlyPath || path;\n\n  /**\n   * The value of the JSON pointer.\n   * Can be any JSON type, not just objects. Unknown file types are represented as Buffers (byte arrays).\n   * @type {?*}\n   */\n  this.value = undefined;\n\n  /**\n   * Indicates whether the pointer references itself.\n   * @type {boolean}\n   */\n  this.circular = false;\n\n  /**\n   * The number of indirect references that were traversed to resolve the value.\n   * Resolving a single pointer may require resolving multiple $Refs.\n   * @type {number}\n   */\n  this.indirections = 0;\n}\n\n/**\n * Resolves the value of a nested property within the given object.\n *\n * @param {*} obj - The object that will be crawled\n * @param {$RefParserOptions} options\n *\n * @returns {Pointer}\n * Returns a JSON pointer whose {@link Pointer#value} is the resolved value.\n * If resolving this value required resolving other JSON references, then\n * the {@link Pointer#$ref} and {@link Pointer#path} will reflect the resolution path\n * of the resolved value.\n */\nPointer.prototype.resolve = function (obj, options) {\n  let tokens = Pointer.parse(this.path);\n\n  // Crawl the object, one token at a time\n  this.value = obj;\n  for (let i = 0; i < tokens.length; i++) {\n    if (resolveIf$Ref(this, options)) {\n      // The $ref path has changed, so append the remaining tokens to the path\n      this.path = Pointer.join(this.path, tokens.slice(i));\n    }\n\n    let token = tokens[i];\n    if (this.value[token] === undefined) {\n      throw ono.syntax(`Error resolving $ref pointer \"${this.originalPath}\". \\nToken \"${token}\" does not exist.`);\n    }\n    else {\n      this.value = this.value[token];\n    }\n  }\n\n  // Resolve the final value\n  resolveIf$Ref(this, options);\n  return this;\n};\n\n/**\n * Sets the value of a nested property within the given object.\n *\n * @param {*} obj - The object that will be crawled\n * @param {*} value - the value to assign\n * @param {$RefParserOptions} options\n *\n * @returns {*}\n * Returns the modified object, or an entirely new object if the entire object is overwritten.\n */\nPointer.prototype.set = function (obj, value, options) {\n  let tokens = Pointer.parse(this.path);\n  let token;\n\n  if (tokens.length === 0) {\n    // There are no tokens, replace the entire object with the new value\n    this.value = value;\n    return value;\n  }\n\n  // Crawl the object, one token at a time\n  this.value = obj;\n  for (let i = 0; i < tokens.length - 1; i++) {\n    resolveIf$Ref(this, options);\n\n    token = tokens[i];\n    if (this.value && this.value[token] !== undefined) {\n      // The token exists\n      this.value = this.value[token];\n    }\n    else {\n      // The token doesn't exist, so create it\n      this.value = setValue(this, token, {});\n    }\n  }\n\n  // Set the value of the final token\n  resolveIf$Ref(this, options);\n  token = tokens[tokens.length - 1];\n  setValue(this, token, value);\n\n  // Return the updated object\n  return obj;\n};\n\n/**\n * Parses a JSON pointer (or a path containing a JSON pointer in the hash)\n * and returns an array of the pointer's tokens.\n * (e.g. \"schema.json#/definitions/person/name\" => [\"definitions\", \"person\", \"name\"])\n *\n * The pointer is parsed according to RFC 6901\n * {@link https://tools.ietf.org/html/rfc6901#section-3}\n *\n * @param {string} path\n * @returns {string[]}\n */\nPointer.parse = function (path) {\n  // Get the JSON pointer from the path's hash\n  let pointer = url.getHash(path).substr(1);\n\n  // If there's no pointer, then there are no tokens,\n  // so return an empty array\n  if (!pointer) {\n    return [];\n  }\n\n  // Split into an array\n  pointer = pointer.split(\"/\");\n\n  // Decode each part, according to RFC 6901\n  for (let i = 0; i < pointer.length; i++) {\n    pointer[i] = decodeURIComponent(pointer[i].replace(escapedSlash, \"/\").replace(escapedTilde, \"~\"));\n  }\n\n  if (pointer[0] !== \"\") {\n    throw ono.syntax(`Invalid $ref pointer \"${pointer}\". Pointers must begin with \"#/\"`);\n  }\n\n  return pointer.slice(1);\n};\n\n/**\n * Creates a JSON pointer path, by joining one or more tokens to a base path.\n *\n * @param {string} base - The base path (e.g. \"schema.json#/definitions/person\")\n * @param {string|string[]} tokens - The token(s) to append (e.g. [\"name\", \"first\"])\n * @returns {string}\n */\nPointer.join = function (base, tokens) {\n  // Ensure that the base path contains a hash\n  if (base.indexOf(\"#\") === -1) {\n    base += \"#\";\n  }\n\n  // Append each token to the base path\n  tokens = Array.isArray(tokens) ? tokens : [tokens];\n  for (let i = 0; i < tokens.length; i++) {\n    let token = tokens[i];\n    // Encode the token, according to RFC 6901\n    base += \"/\" + encodeURIComponent(token.replace(tildes, \"~0\").replace(slashes, \"~1\"));\n  }\n\n  return base;\n};\n\n/**\n * If the given pointer's {@link Pointer#value} is a JSON reference,\n * then the reference is resolved and {@link Pointer#value} is replaced with the resolved value.\n * In addition, {@link Pointer#path} and {@link Pointer#$ref} are updated to reflect the\n * resolution path of the new value.\n *\n * @param {Pointer} pointer\n * @param {$RefParserOptions} options\n * @returns {boolean} - Returns `true` if the resolution path changed\n */\nfunction resolveIf$Ref (pointer, options) {\n  // Is the value a JSON reference? (and allowed?)\n\n  if ($Ref.isAllowed$Ref(pointer.value, options)) {\n    let $refPath = url.resolve(pointer.path, pointer.value.$ref);\n\n    if ($refPath === pointer.path) {\n      // The value is a reference to itself, so there's nothing to do.\n      pointer.circular = true;\n    }\n    else {\n      let resolved = pointer.$ref.$refs._resolve($refPath, options);\n      pointer.indirections += resolved.indirections + 1;\n\n      if ($Ref.isExtended$Ref(pointer.value)) {\n        // This JSON reference \"extends\" the resolved value, rather than simply pointing to it.\n        // So the resolved path does NOT change.  Just the value does.\n        pointer.value = $Ref.dereference(pointer.value, resolved.value);\n        return false;\n      }\n      else {\n        // Resolve the reference\n        pointer.$ref = resolved.$ref;\n        pointer.path = resolved.path;\n        pointer.value = resolved.value;\n      }\n\n      return true;\n    }\n  }\n}\n\n/**\n * Sets the specified token value of the {@link Pointer#value}.\n *\n * The token is evaluated according to RFC 6901.\n * {@link https://tools.ietf.org/html/rfc6901#section-4}\n *\n * @param {Pointer} pointer - The JSON Pointer whose value will be modified\n * @param {string} token - A JSON Pointer token that indicates how to modify `obj`\n * @param {*} value - The value to assign\n * @returns {*} - Returns the assigned value\n */\nfunction setValue (pointer, token, value) {\n  if (pointer.value && typeof pointer.value === \"object\") {\n    if (token === \"-\" && Array.isArray(pointer.value)) {\n      pointer.value.push(value);\n    }\n    else {\n      pointer.value[token] = value;\n    }\n  }\n  else {\n    throw ono.syntax(`Error assigning $ref pointer \"${pointer.path}\". \\nCannot set \"${token}\" of a non-object.`);\n  }\n  return value;\n}\n"]},"metadata":{},"sourceType":"script"}